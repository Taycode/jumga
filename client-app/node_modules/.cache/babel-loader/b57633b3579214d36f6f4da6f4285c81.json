{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/usr/src/app/src/components/AuthForm/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form, Row, Col, Spinner, Button } from \"react-bootstrap\";\nimport FormField from \"../FormField\";\nimport { useAuth } from \"./../../util/auth\";\nimport { useForm } from \"react-hook-form\";\nimport handleAuthFormSubmit from \"./helper\";\nimport { useRouter } from \"./../../util/router.js\";\nimport AuthAlert from \"../AuthAlert\";\n\nconst AuthForm = ({\n  authType,\n  authFormData\n}) => {\n  _s();\n\n  const auth = useAuth();\n  console.log(auth);\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [authMessage, setAuthMessage] = useState(false);\n  const {\n    handleSubmit,\n    register,\n    errors,\n    getValues\n  } = useForm();\n\n  const onSubmit = formData => {\n    return handleAuthFormSubmit(authType, formData, auth, setLoading, router, setAuthMessage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [authMessage && /*#__PURE__*/_jsxDEV(AuthAlert, {\n      type: authMessage.type,\n      message: authMessage.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit(onSubmit),\n      children: [[\"register\"].includes(authType) && /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"First Name\",\n            children: /*#__PURE__*/_jsxDEV(FormField, {\n              size: \"md\",\n              name: \"firstName\",\n              type: \"text\",\n              placeholder: \"Firstname\",\n              error: errors.firstName,\n              inputRef: register({\n                required: \"Your name is required\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"Last Name\",\n            children: /*#__PURE__*/_jsxDEV(FormField, {\n              size: \"md\",\n              name: \"lastName\",\n              type: \"text\",\n              placeholder: \"Lastname\",\n              error: errors.lastName,\n              inputRef: register({\n                required: \"Your name is required\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), [\"register\", \"login\", \"forgot-password\"].includes(authType) && /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"Email\",\n        children: /*#__PURE__*/_jsxDEV(FormField, {\n          size: \"md\",\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"Email\",\n          error: errors.email,\n          inputRef: register({\n            required: \"Your email is required\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), [\"register\", \"login\", \"change-password\"].includes(authType) && /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"Password\",\n        children: /*#__PURE__*/_jsxDEV(FormField, {\n          size: \"md\",\n          name: \"password\",\n          type: \"password\",\n          placeholder: \"Password\",\n          error: errors.password,\n          inputRef: register({\n            required: \"Please enter a password\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), [\"register\", \"change-password\"].includes(authType) && /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"Confirm Password\",\n        children: /*#__PURE__*/_jsxDEV(FormField, {\n          size: \"md\",\n          name: \"confirmPassword\",\n          type: \"password\",\n          placeholder: \"Confirm Password\",\n          error: errors.confirmPassword,\n          inputRef: register({\n            required: \"Please enter your password again\",\n            validate: value => {\n              if (value === getValues().password) {\n                return true;\n              } else {\n                return \"This doesn't match your password\";\n              }\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        block: true,\n        size: \"md\",\n        type: \"submit\",\n        disabled: loading,\n        className: \"mt-4\",\n        children: [!loading && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: authFormData === null || authFormData === void 0 ? void 0 : authFormData.buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 24\n        }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          size: \"sm\",\n          role: \"status\",\n          \"aria-hidden\": true,\n          className: \"align-baseline\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AuthForm, \"HnBpnhVK/xASaE7EXR97TE3nKg4=\", false, function () {\n  return [useAuth, useRouter, useForm];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/usr/src/app/src/components/AuthForm/index.js"],"names":["React","useState","Form","Row","Col","Spinner","Button","FormField","useAuth","useForm","handleAuthFormSubmit","useRouter","AuthAlert","AuthForm","authType","authFormData","auth","console","log","router","loading","setLoading","authMessage","setAuthMessage","handleSubmit","register","errors","getValues","onSubmit","formData","type","message","includes","firstName","required","lastName","email","password","confirmPassword","validate","value","buttonText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Row, Col, Spinner, Button } from \"react-bootstrap\";\nimport FormField from \"../FormField\";\nimport { useAuth } from \"./../../util/auth\";\nimport { useForm } from \"react-hook-form\";\nimport handleAuthFormSubmit from \"./helper\";\nimport { useRouter } from \"./../../util/router.js\";\nimport AuthAlert from \"../AuthAlert\";\n\nconst AuthForm = ({ authType, authFormData }) => {\n  const auth = useAuth();\n  console.log(auth);\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [authMessage, setAuthMessage] = useState(false);\n\n  const { handleSubmit, register, errors, getValues } = useForm();\n\n  const onSubmit = (formData) => {\n    return handleAuthFormSubmit(\n      authType,\n      formData,\n      auth,\n      setLoading,\n      router,\n      setAuthMessage\n    );\n  };\n\n  return (\n    <>\n      {authMessage && (\n        <AuthAlert\n          type={authMessage.type}\n          message={authMessage.message}\n        ></AuthAlert>\n      )}\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        {[\"register\"].includes(authType) && (\n          <Row>\n            <Col>\n              <Form.Group controlId=\"First Name\">\n                <FormField\n                  size=\"md\"\n                  name=\"firstName\"\n                  type=\"text\"\n                  placeholder=\"Firstname\"\n                  error={errors.firstName}\n                  inputRef={register({\n                    required: \"Your name is required\",\n                  })}\n                ></FormField>\n              </Form.Group>\n            </Col>\n            <Col>\n              <Form.Group controlId=\"Last Name\">\n                <FormField\n                  size=\"md\"\n                  name=\"lastName\"\n                  type=\"text\"\n                  placeholder=\"Lastname\"\n                  error={errors.lastName}\n                  inputRef={register({\n                    required: \"Your name is required\",\n                  })}\n                ></FormField>\n              </Form.Group>\n            </Col>\n          </Row>\n        )}\n\n        {[\"register\", \"login\", \"forgot-password\"].includes(authType) && (\n          <Form.Group controlId=\"Email\">\n            <FormField\n              size=\"md\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              error={errors.email}\n              inputRef={register({\n                required: \"Your email is required\",\n              })}\n            ></FormField>\n          </Form.Group>\n        )}\n        {[\"register\", \"login\", \"change-password\"].includes(authType) && (\n          <Form.Group controlId=\"Password\">\n            <FormField\n              size=\"md\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              error={errors.password}\n              inputRef={register({\n                required: \"Please enter a password\",\n              })}\n            ></FormField>\n          </Form.Group>\n        )}\n\n        {[\"register\", \"change-password\"].includes(authType) && (\n          <Form.Group controlId=\"Confirm Password\">\n            <FormField\n              size=\"md\"\n              name=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              error={errors.confirmPassword}\n              inputRef={register({\n                required: \"Please enter your password again\",\n                validate: (value) => {\n                  if (value === getValues().password) {\n                    return true;\n                  } else {\n                    return \"This doesn't match your password\";\n                  }\n                },\n              })}\n            ></FormField>\n          </Form.Group>\n        )}\n\n        <Button\n          variant=\"primary\"\n          block={true}\n          size={\"md\"}\n          type=\"submit\"\n          disabled={loading}\n          className=\"mt-4\"\n        >\n          {!loading && <span>{authFormData?.buttonText}</span>}\n\n          {loading && (\n            <Spinner\n              animation=\"border\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden={true}\n              className=\"align-baseline\"\n            >\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          )}\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}