{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/usr/src/app/src/util/router.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/*\n  A wrapper around React Router that adds a useRouter() hook so that any component\n  can easily access params, location, history, and trigger navigation.\n  Import from this file instead of react-router-dom directly.\n*/\nimport React, { useMemo, useEffect } from \"react\";\nimport { Router as RouterOriginal, useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nimport queryString from \"query-string\"; // Use a custom history object and pass to Router so that we\n// can utilize history.listen() where needed (such as for pageview tracking)\n\nimport { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory(); // Export our <Router> component\n// Includes custom history object and component for auto-scrolling to top\n\nexport function Router({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(RouterOriginal, {\n    history: history,\n    children: [/*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n} // Custom useRouter hook for getting route data and methods inside any component.\n// NOTE: This hook includes all React Router hooks, which can result in extra re-renders\n// in some cases. When needed, you can optimize performance by importing the specific hook\n// you need (such as useParams or useLocation) instead of this custom useRouter hook.\n\n_c = Router;\nexport function useRouter() {\n  _s();\n\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch(); // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: { ...queryString.parse(location.search),\n        // Convert string to object\n        ...params\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history\n    };\n  }, [params, match, location, history]);\n} // Remove or customize if you need more advanced scroll behavior\n// and don't want to always scroll to top when location.pathname changes.\n\n_s(useRouter, \"Rwg7Mma86I553fS3ZVShWfMSkTE=\", false, function () {\n  return [useParams, useLocation, useHistory, useRouteMatch];\n});\n\nfunction ScrollToTop() {\n  _s2();\n\n  const location = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n  return null;\n}\n\n_s2(ScrollToTop, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n\n_c2 = ScrollToTop;\nexport { Route, Switch, Link, NavLink, useParams, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Router\");\n$RefreshReg$(_c2, \"ScrollToTop\");","map":{"version":3,"sources":["/usr/src/app/src/util/router.js"],"names":["React","useMemo","useEffect","Router","RouterOriginal","useParams","useLocation","useHistory","useRouteMatch","queryString","createBrowserHistory","history","children","useRouter","params","location","match","push","replace","pathname","query","parse","search","ScrollToTop","window","scrollTo","Route","Switch","Link","NavLink"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SACEC,MAAM,IAAIC,cADZ,EAEEC,SAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,QAMO,kBANP;AAOA,OAAOC,WAAP,MAAwB,cAAxB,C,CAEA;AACA;;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,OAAO,MAAMC,OAAO,GAAGD,oBAAoB,EAApC,C,CAEP;AACA;;AACA,OAAO,SAASP,MAAT,CAAgB;AAAES,EAAAA;AAAF,CAAhB,EAA8B;AACnC,sBACE,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAED,OAAzB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAED;AACA;AACA;AACA;;KAZgBT,M;AAahB,OAAO,SAASU,SAAT,GAAqB;AAAA;;AAC1B,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMK,OAAO,GAAGJ,UAAU,EAA1B;AACA,QAAMS,KAAK,GAAGR,aAAa,EAA3B,CAJ0B,CAM1B;AACA;;AACA,SAAOP,OAAO,CAAC,MAAM;AACnB,WAAO;AACL;AACAgB,MAAAA,IAAI,EAAEN,OAAO,CAACM,IAFT;AAGLC,MAAAA,OAAO,EAAEP,OAAO,CAACO,OAHZ;AAILC,MAAAA,QAAQ,EAAEJ,QAAQ,CAACI,QAJd;AAKL;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,EACL,GAAGX,WAAW,CAACY,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CADE;AACkC;AACvC,WAAGR;AAFE,OARF;AAYL;AACA;AACAE,MAAAA,KAdK;AAeLD,MAAAA,QAfK;AAgBLJ,MAAAA;AAhBK,KAAP;AAkBD,GAnBa,EAmBX,CAACG,MAAD,EAASE,KAAT,EAAgBD,QAAhB,EAA0BJ,OAA1B,CAnBW,CAAd;AAoBD,C,CAED;AACA;;GA/BgBE,S;UACCR,S,EACEC,W,EACDC,U,EACFC,a;;;AA4BhB,SAASe,WAAT,GAAuB;AAAA;;AACrB,QAAMR,QAAQ,GAAGT,WAAW,EAA5B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD,GAFQ,EAEN,CAACV,QAAQ,CAACI,QAAV,CAFM,CAAT;AAGA,SAAO,IAAP;AACD;;IANQI,W;UACUjB,W;;;MADViB,W;AAQT,SACEG,KADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,OAJF,EAKExB,SALF,EAMEC,WANF,EAOEC,UAPF,EAQEC,aARF,QASO,kBATP","sourcesContent":["/*\n  A wrapper around React Router that adds a useRouter() hook so that any component\n  can easily access params, location, history, and trigger navigation.\n  Import from this file instead of react-router-dom directly.\n*/\n\nimport React, { useMemo, useEffect } from \"react\";\nimport {\n  Router as RouterOriginal,\n  useParams,\n  useLocation,\n  useHistory,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\n// Use a custom history object and pass to Router so that we\n// can utilize history.listen() where needed (such as for pageview tracking)\nimport { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory();\n\n// Export our <Router> component\n// Includes custom history object and component for auto-scrolling to top\nexport function Router({ children }) {\n  return (\n    <RouterOriginal history={history}>\n      <ScrollToTop />\n      {children}\n    </RouterOriginal>\n  );\n}\n\n// Custom useRouter hook for getting route data and methods inside any component.\n// NOTE: This hook includes all React Router hooks, which can result in extra re-renders\n// in some cases. When needed, you can optimize performance by importing the specific hook\n// you need (such as useParams or useLocation) instead of this custom useRouter hook.\nexport function useRouter() {\n  const params = useParams();\n  const location = useLocation();\n  const history = useHistory();\n  const match = useRouteMatch();\n\n  // Return our custom router object\n  // Memoize so that a new object is only returned if something changes\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: {\n        ...queryString.parse(location.search), // Convert string to object\n        ...params,\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history,\n    };\n  }, [params, match, location, history]);\n}\n\n// Remove or customize if you need more advanced scroll behavior\n// and don't want to always scroll to top when location.pathname changes.\nfunction ScrollToTop() {\n  const location = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location.pathname]);\n  return null;\n}\n\nexport {\n  Route,\n  Switch,\n  Link,\n  NavLink,\n  useParams,\n  useLocation,\n  useHistory,\n  useRouteMatch,\n} from \"react-router-dom\";\n"]},"metadata":{},"sourceType":"module"}