{"ast":null,"code":"import axios from \"axios\";\n\nconst logRequests = () => {\n  return process.env.NODE_ENV === \"development\" && (axios.interceptors.request.use(request => {\n    console.log(\"Starting Request\", request);\n    return request;\n  }), axios.interceptors.response.use(response => {\n    console.log(\"Response:\", response);\n    return response;\n  }));\n};\n\nlogRequests();\nexport async function apiRequest(path, method = \"GET\", data, params) {\n  const accessToken = localStorage.getItem(\"token\");\n  const {\n    CancelToken\n  } = axios;\n  const source = CancelToken.source();\n\n  try {\n    const response = await axios({\n      url: `${process.env.REACT_APP_API_BASEURL}${path}`,\n      method,\n      headers: {\n        token: accessToken\n      },\n      params: { ...params\n      },\n      cancelToken: source.token,\n      data\n    });\n    const {\n      data: {\n        status,\n        message\n      }\n    } = response;\n\n    if (status) {\n      return {\n        status: true,\n        data: response.data.data,\n        message\n      };\n    }\n  } catch (err) {\n    return {\n      status: false,\n      message: err.response ? err.response.data.message : err.message,\n      err\n    };\n  }\n}","map":{"version":3,"sources":["/usr/src/app/src/util/apiRequest.js"],"names":["axios","logRequests","process","env","NODE_ENV","interceptors","request","use","console","log","response","apiRequest","path","method","data","params","accessToken","localStorage","getItem","CancelToken","source","url","REACT_APP_API_BASEURL","headers","token","cancelToken","status","message","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,SACEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,KACCJ,KAAK,CAACK,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AAC3CE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,OAAhC;AACA,WAAOA,OAAP;AACD,GAHA,GAIDN,KAAK,CAACK,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CAAiCG,QAAD,IAAc;AAC5CF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAzB;AACA,WAAOA,QAAP;AACD,GAHD,CALA,CADF;AAWD,CAZD;;AAcAT,WAAW;AAEX,OAAO,eAAeU,UAAf,CAA0BC,IAA1B,EAAgCC,MAAM,GAAG,KAAzC,EAAgDC,IAAhD,EAAsDC,MAAtD,EAA8D;AACnE,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBnB,KAAxB;AACA,QAAMoB,MAAM,GAAGD,WAAW,CAACC,MAAZ,EAAf;;AAEA,MAAI;AACF,UAAMV,QAAQ,GAAG,MAAMV,KAAK,CAAC;AAC3BqB,MAAAA,GAAG,EAAG,GAAEnB,OAAO,CAACC,GAAR,CAAYmB,qBAAsB,GAAEV,IAAK,EADtB;AAE3BC,MAAAA,MAF2B;AAG3BU,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAER;AADA,OAHkB;AAM3BD,MAAAA,MAAM,EAAE,EACN,GAAGA;AADG,OANmB;AAS3BU,MAAAA,WAAW,EAAEL,MAAM,CAACI,KATO;AAU3BV,MAAAA;AAV2B,KAAD,CAA5B;AAYA,UAAM;AACJA,MAAAA,IAAI,EAAE;AAAEY,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AADF,QAEFjB,QAFJ;;AAGA,QAAIgB,MAAJ,EAAY;AACV,aAAO;AACLA,QAAAA,MAAM,EAAE,IADH;AAELZ,QAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAAT,CAAcA,IAFf;AAGLa,QAAAA;AAHK,OAAP;AAKD;AACF,GAvBD,CAuBE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLF,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EAAEC,GAAG,CAAClB,QAAJ,GAAekB,GAAG,CAAClB,QAAJ,CAAaI,IAAb,CAAkBa,OAAjC,GAA2CC,GAAG,CAACD,OAFnD;AAGLC,MAAAA;AAHK,KAAP;AAKD;AACF","sourcesContent":["import axios from \"axios\";\n\nconst logRequests = () => {\n  return (\n    process.env.NODE_ENV === \"development\" &&\n    (axios.interceptors.request.use((request) => {\n      console.log(\"Starting Request\", request);\n      return request;\n    }),\n    axios.interceptors.response.use((response) => {\n      console.log(\"Response:\", response);\n      return response;\n    }))\n  );\n};\n\nlogRequests();\n\nexport async function apiRequest(path, method = \"GET\", data, params) {\n  const accessToken = localStorage.getItem(\"token\");\n\n  const { CancelToken } = axios;\n  const source = CancelToken.source();\n\n  try {\n    const response = await axios({\n      url: `${process.env.REACT_APP_API_BASEURL}${path}`,\n      method,\n      headers: {\n        token: accessToken,\n      },\n      params: {\n        ...params,\n      },\n      cancelToken: source.token,\n      data,\n    });\n    const {\n      data: { status, message },\n    } = response;\n    if (status) {\n      return {\n        status: true,\n        data: response.data.data,\n        message,\n      };\n    }\n  } catch (err) {\n    return {\n      status: false,\n      message: err.response ? err.response.data.message : err.message,\n      err,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}