{"ast":null,"code":"import { Base64 as n } from \"js-base64\";\n\nfunction e() {\n  return (e = Object.assign || function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n\n      for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n\n    return n;\n  }).apply(this, arguments);\n}\n\nvar t = function (e) {\n  return n.encode(JSON.stringify(e));\n},\n    r = function () {\n  return String(Math.floor(1e4 * Math.random()));\n},\n    o = {\n  onChangeCallback: null,\n  getCurrentUser: function () {\n    var n = l(\"access-token\");\n    return i(n).then(function (n) {\n      return n.user;\n    });\n  },\n  signup: function (n, e) {\n    var o = this;\n    return s(n).then(function (u) {\n      if (u) throw new m(\"auth/email-already-in-use\", \"Email is already in use\");\n      var a = {\n        uid: r(),\n        email: n,\n        password: e\n      },\n          i = {\n        user: a,\n        token: t(a)\n      };\n      return c(i).then(function () {\n        return o.changeAccessToken(i.token), i;\n      });\n    });\n  },\n  signin: function (n, e) {\n    var t = this;\n    return s(n).then(function (n) {\n      if (n) {\n        if (n.user.password === e) return t.changeAccessToken(n.token), n;\n        throw new m(\"auth/wrong-password\", \"Password is wrong\");\n      }\n\n      throw new m(\"auth/user-not-found\", \"Email does not have an account\");\n    });\n  },\n  signinWithProvider: function (n) {\n    var e = this;\n    return h(n).then(function (n) {\n      return e.changeAccessToken(n.token), n;\n    });\n  },\n  signout: function () {\n    try {\n      return this.changeAccessToken(null), Promise.resolve();\n    } catch (n) {\n      return Promise.reject(n);\n    }\n  },\n  onChange: function (n) {\n    var e = this;\n    this.onChangeCallback = n;\n\n    var t = function (n) {\n      i(n).then(function (n) {\n        e.onChangeCallback(n || !1);\n      });\n    },\n        r = window.addEventListener(\"storage\", function (n) {\n      \"access-token\" === n.key && t(JSON.parse(n.newValue));\n    }, !1),\n        o = l(\"access-token\");\n\n    return t(o), function () {\n      window.removeEventListener(\"storage\", r);\n    };\n  },\n  sendPasswordResetEmail: function (n) {\n    return s(n).then(function (n) {\n      throw n ? (w(\"auth-pass-reset-code\", n.token), console.log(\"Your one-time use password reset code:\", n.token), new m(\"auth/cannot-send-email\", \"You're using Fake Auth, which cannot send password reset emails. These emails normally contain a link to your site with a special reset code. But worry not! Fake Auth has stored the reset code locally in your browser so you can simply go to your change password page now and choose a new password. This enables you to fully test your password reset flow and error states without involving emails.\")) : new m(\"auth/user-not-found\", \"Email does not have an account\");\n    });\n  },\n  confirmPasswordReset: function (n, e) {\n    var t;\n    return e ? t = e : (t = l(\"auth-pass-reset-code\"), window.localStorage.removeItem(\"auth-pass-reset-code-fa5\")), d(t, {\n      password: n\n    }).then(function (n) {\n      if (n) return !0;\n      throw new m(\"auth/invalid-action-code\", \"Invalid password update code\");\n    });\n  },\n  updateEmail: function (n) {\n    return f({\n      email: n\n    }).then(function (n) {\n      return n.user;\n    });\n  },\n  updatePassword: function (n) {\n    return f({\n      password: n\n    }).then(function (n) {\n      return n.user;\n    });\n  },\n  updateProfile: function (n) {\n    return f(n).then(function (n) {\n      return n.user;\n    });\n  },\n  changeAccessToken: function (n) {\n    var e = this;\n    w(\"access-token\", n), this.onChangeCallback && i(n).then(function (n) {\n      e.onChangeCallback(n || !1);\n    });\n  },\n  getAccessToken: function () {\n    return l(\"access-token\");\n  },\n  verifyAccessToken: function (e) {\n    return JSON.parse(n.decode(e));\n  }\n},\n    u = function () {\n  return l(\"auth-db\", []);\n},\n    a = function (n) {\n  return w(\"auth-db\", n);\n},\n    i = function (n) {\n  return p(function () {\n    return u().find(function (e) {\n      return e.token === n;\n    });\n  });\n},\n    s = function (n) {\n  return p(function () {\n    return u().find(function (e) {\n      return e.user.email === n;\n    });\n  });\n},\n    c = function (n) {\n  return p(function () {\n    var e = u();\n    e.push(n), a(e);\n  });\n},\n    f = function (n) {\n  var e = l(\"access-token\");\n  if (!e) throw new m(\"auth/not-signed-in\", \"You must be signed in to perform this action\");\n  return d(e, n);\n},\n    d = function (n, t) {\n  return void 0 === t && (t = {}), p(function () {\n    var r = u(),\n        o = r.findIndex(function (e) {\n      return e.token === n;\n    });\n    return -1 !== o && (r[o] = e({}, r[o], {\n      user: e({}, r[o].user, {}, t)\n    }), a(r), r[o]);\n  });\n},\n    h = function (n) {\n  return k(), s(\"demo@gmail.com\").then(function (t) {\n    return e({}, t, {\n      user: e({}, t.user, {\n        provider: n\n      })\n    });\n  });\n};\n\nfunction l(n, e) {\n  void 0 === e && (e = null);\n  var t = window.localStorage.getItem(n + \"-fa5\");\n  return t ? JSON.parse(t) : e;\n}\n\nfunction w(n, e) {\n  window.localStorage.setItem(n + \"-fa5\", JSON.stringify(e));\n}\n\nvar p = function (n) {\n  return new Promise(function (e) {\n    return setTimeout(function () {\n      e(n());\n    }, 200);\n  });\n};\n\nfunction m(n, e) {\n  var t = new Error(e);\n  return t.code = n, t;\n}\n\nm.prototype = Object.create(Error.prototype);\nvar g = {\n  uid: r(),\n  email: \"demo@gmail.com\",\n  password: \"demo\"\n},\n    v = {\n  user: g,\n  token: t(g)\n};\n\nfunction k() {\n  if (!u().find(function (n) {\n    return n.user.email === g.email;\n  })) {\n    var n = u();\n    n.push(v), a(n);\n  }\n}\n\n\"undefined\" != typeof window && k();\nexport default o;","map":{"version":3,"sources":["../src/index.js"],"names":["generateToken","data","Base64","encode","JSON","stringify","generateUid","String","Math","floor","random","onChangeCallback","getCurrentUser","token","storeGet","getAuth","then","auth","user","signup","email","password","getAuthByEmail","CustomError","uid","newAuth","addAuth","_this","changeAccessToken","signin","_this2","signinWithProvider","provider","getAuthByProvider","_this3","signout","this","Promise","resolve","onChange","cb","handleTokenChange","_this6","listener","window","addEventListener","key","newValue","parse","accessToken","removeEventListener","sendPasswordResetEmail","storeSet","console","log","confirmPasswordReset","code","resetCode","updateAuth","updatedAuth","updateEmail","updateAuthForCurrentUser","updatePassword","updateProfile","_this7","getAccessToken","verifyAccessToken","decode","_getAll","_setAll","db","delay","find","item","all","push","userData","index","findIndex","initializeDb","defaultValue","value","localStorage","getItem","setItem","removeItem","setTimeout","message","error","Error","prototype","Object","create","initialUser","initialAuth"],"mappings":";;;;;;;;;;;;AAGA;;AAAA,IAIMA,CAAAA,GAAgB,UAACC,CAAD,EAACA;AAAAA,SAASC,CAAAA,CAAOC,MAAPD,CAAcE,IAAAA,CAAKC,SAALD,CAAeH,CAAfG,CAAdF,CAATD;AAAsCA,CAJ7D;AAAA,IAMMK,CAAAA,GAAc,YAAA;AAAA,SAAMC,MAAAA,CAAOC,IAAAA,CAAKC,KAALD,CAA2B,MAAhBA,IAAAA,CAAKE,MAALF,EAAXA,CAAPD,CAAN;AAA6BG,CANjD;AAAA,IAMiDA,CAAAA,GAElC;AACbC,EAAAA,gBAAAA,EAAkB,IADL;AAGbC,EAAAA,cAAAA,EAAgB,YAAA;AACd,QAAMC,CAAAA,GAAQC,CAAAA,CAAS,cAATA,CAAd;AACA,WAAOC,CAAAA,CAAQF,CAARE,CAAAA,CAAeC,IAAfD,CAAoB,UAACE,CAAD,EAACA;AAAAA,aAASA,CAAAA,CAAKC,IAAdD;AAAcC,KAAnCH,CAAP;AAA0CG,GAL/B;AAQbC,EAAAA,MAAAA,EAAQ,UAAUC,CAAV,EAAiBC,CAAjB,EAAiBA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AACvB,WAAOC,CAAAA,CAAeF,CAAfE,CAAAA,CAAsBN,IAAtBM,CAA2B,UAACL,CAAD,EAACA;AAEjC,UAAIA,CAAJ,EACE,MAAA,IAAUM,CAAV,CACE,2BADF,EAEE,yBAFF,CAAA;AAOF,UAAML,CAAAA,GAAO;AAAEM,QAAAA,GAAAA,EAAKlB,CAAAA,EAAP;AAAsBc,QAAAA,KAAAA,EAAAA,CAAtB;AAA6BC,QAAAA,QAAAA,EAAAA;AAA7B,OAAb;AAAA,UACMI,CAAAA,GAAU;AAAEP,QAAAA,IAAAA,EAAAA,CAAF;AAAQL,QAAAA,KAAAA,EAAOb,CAAAA,CAAckB,CAAdlB;AAAf,OADhB;AAGA,aAAO0B,CAAAA,CAAQD,CAARC,CAAAA,CAAiBV,IAAjBU,CAAsB,YAAA;AAE3B,eADAC,CAAAA,CAAKC,iBAALD,CAAuBF,CAAAA,CAAQZ,KAA/Bc,GACOF,CAAP;AAAOA,OAFFC,CAAP;AAESD,KAfJH,CAAP;AAeWG,GAxBA;AA6BbI,EAAAA,MAAAA,EAAQ,UAAUT,CAAV,EAAiBC,CAAjB,EAAiBA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AACvB,WAAOC,CAAAA,CAAeF,CAAfE,CAAAA,CAAsBN,IAAtBM,CAA2B,UAACL,CAAD,EAACA;AAEjC,UAAIA,CAAJ,EAAU;AAER,YAAIA,CAAAA,CAAKC,IAALD,CAAUI,QAAVJ,KAAuBI,CAA3B,EAEE,OADAS,CAAAA,CAAKF,iBAALE,CAAuBb,CAAAA,CAAKJ,KAA5BiB,GACOb,CAAP;AAEA,cAAA,IAAUM,CAAV,CAAsB,qBAAtB,EAA6C,mBAA7C,CAAA;AAIF;;AAAA,YAAA,IAAUA,CAAV,CACE,qBADF,EAEE,gCAFF,CAAA;AAEE,KAdCD,CAAP;AAcM,GA5CK;AAkDbS,EAAAA,kBAAAA,EAAoB,UAAUC,CAAV,EAAUA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AAC5B,WAAOC,CAAAA,CAAkBD,CAAlBC,CAAAA,CAA4BjB,IAA5BiB,CAAiC,UAAChB,CAAD,EAACA;AAEvC,aADAiB,CAAAA,CAAKN,iBAALM,CAAuBjB,CAAAA,CAAKJ,KAA5BqB,GACOjB,CAAP;AAAOA,KAFFgB,CAAP;AAEShB,GArDE;AAyDbkB,EAAAA,OAAAA,EAAAA,YAAAA;AAAAA,QAAAA;AAGE,aADAC,KAAKR,iBAALQ,CAAuB,IAAvBA,GACOC,OAAAA,CAAQC,OAARD,EAAP;AAHK,KAAPF,CAAO,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAzDM;AA+DbI,EAAAA,QAAAA,EAAU,UAAUC,CAAV,EAAUA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AAIlBJ,SAAKzB,gBAALyB,GAAwBI,CAAxBJ;;AAEA,QAAMK,CAAAA,GAAoB,UAAC5B,CAAD,EAACA;AACzBE,MAAAA,CAAAA,CAAQF,CAARE,CAAAA,CAAeC,IAAfD,CAAoB,UAACE,CAAD,EAACA;AACnByB,QAAAA,CAAAA,CAAK/B,gBAAL+B,CAAsBzB,CAAAA,IAAAA,CAAQ,CAA9ByB;AAA8B,OADhC3B;AACgC,KAFlC;AAAA,QAMM4B,CAAAA,GAAWC,MAAAA,CAAOC,gBAAPD,CACf,SADeA,EAEf,UAAA,CAAA,EAAA;AACc,yBAAA,CAAA,CADXE,GACW,IACVL,CAAAA,CAAkBrC,IAAAA,CAAK4C,KAAL5C,CAAK4C,CAAAA,CAFnBD,QAEc3C,CAAlBqC,CADU;AADNM,KAFOH,EAEPG,CAKR,CAPeH,CANjB;AAAA,QAgBMK,CAAAA,GAAcnC,CAAAA,CAAS,cAATA,CAhBpB;;AAqBA,WAJA2B,CAAAA,CAAkBQ,CAAlBR,CAAAA,EAAkBQ,YAAAA;AAKhBL,MAAAA,MAAAA,CAAOM,mBAAPN,CAA2B,SAA3BA,EAAsCD,CAAtCC;AAAsCD,KADxC;AACwCA,GA3F7B;AA+FbQ,EAAAA,sBAAAA,EAAwB,UAAU/B,CAAV,EAAUA;AAMhC,WAAOE,CAAAA,CAAeF,CAAfE,CAAAA,CAAsBN,IAAtBM,CAA2B,UAACL,CAAD,EAACA;AACjC,YAAIA,CAAAA,IACFmC,CAAAA,CAAS,sBAATA,EAAiCnC,CAAAA,CAAKJ,KAAtCuC,CAAAA,EACAC,OAAAA,CAAQC,GAARD,CAAY,wCAAZA,EAAsDpC,CAAAA,CAAKJ,KAA3DwC,CADAD,EAC2DvC,IACjDU,CADiDV,CAEzD,wBAFyDA,EAEzD,8YAFyDA,CAFzDI,IAIA,IAIQM,CAJR,CAKA,qBALA,EAMA,gCANA,CAJJ;AAUI,KAXCD,CAAP;AAWM,GAhHK;AAsHbiC,EAAAA,oBAAAA,EAAsB,UAAUlC,CAAV,EAAoBmC,CAApB,EAAoBA;AACxC,QAAIC,CAAJ;AAWA,WATID,CAAAA,GACFC,CAAAA,GAAYD,CADVA,IAIFC,CAAAA,GAAY3C,CAAAA,CAAS,sBAATA,CAAZ2C,EAuJJb,MAAAA,CAAOsC,YAAPtC,CAAoByC,UAApBzC,CAAkCE,0BAAlCF,CA3JMY,CAAAA,EASGE,CAAAA,CAAWD,CAAXC,EAAsB;AAAErC,MAAAA,QAAAA,EAAAA;AAAF,KAAtBqC,CAAAA,CAAoC1C,IAApC0C,CAAyC,UAACC,CAAD,EAACA;AAC/C,UAAIA,CAAJ,EACE,OAAA,CAAA,CAAA;AAEA,YAAA,IAAUpC,CAAV,CACE,0BADF,EAEE,8BAFF,CAAA;AAEE,KANCmC,CAAP;AAMM,GAxIK;AA8IbE,EAAAA,WAAAA,EAAa,UAAUxC,CAAV,EAAUA;AACrB,WAAOyC,CAAAA,CAAyB;AAAEzC,MAAAA,KAAAA,EAAAA;AAAF,KAAzByC,CAAAA,CAAoC7C,IAApC6C,CAAyC,UAACF,CAAD,EAACA;AAC/C,aAAOA,CAAAA,CAAYzC,IAAnB;AAAmBA,KADd2C,CAAP;AACqB3C,GAhJV;AAoJb4C,EAAAA,cAAAA,EAAgB,UAAUzC,CAAV,EAAUA;AACxB,WAAOwC,CAAAA,CAAyB;AAAExC,MAAAA,QAAAA,EAAAA;AAAF,KAAzBwC,CAAAA,CAAuC7C,IAAvC6C,CAA4C,UAACF,CAAD,EAACA;AAClD,aAAOA,CAAAA,CAAYzC,IAAnB;AAAmBA,KADd2C,CAAP;AACqB3C,GAtJV;AA0Jb6C,EAAAA,aAAAA,EAAe,UAAU9D,CAAV,EAAUA;AACvB,WAAO4D,CAAAA,CAAyB5D,CAAzB4D,CAAAA,CAA+B7C,IAA/B6C,CAAoC,UAACF,CAAD,EAACA;AAC1C,aAAOA,CAAAA,CAAYzC,IAAnB;AAAmBA,KADd2C,CAAP;AACqB3C,GA5JV;AAiKbU,EAAAA,iBAAAA,EAAmB,UAAUqB,CAAV,EAAUA;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AAC3BG,IAAAA,CAAAA,CAAS,cAATA,EAAyBH,CAAzBG,CAAAA,EAEIhB,KAAKzB,gBAALyB,IAEFrB,CAAAA,CAAQkC,CAARlC,CAAAA,CAAqBC,IAArBD,CAA0B,UAACE,CAAD,EAACA;AACzB+C,MAAAA,CAAAA,CAAKrD,gBAALqD,CAAsB/C,CAAAA,IAAAA,CAAQ,CAA9B+C;AAA8B,KADhCjD,CAJFqC;AAKkC,GAvKvB;AA4Kba,EAAAA,cAAAA,EAAgB,YAAA;AACd,WAAOnD,CAAAA,CAAS,cAATA,CAAP;AAAgB,GA7KL;AAiLboD,EAAAA,iBAAAA,EAAmB,UAAUjB,CAAV,EAAUA;AAC3B,WAAO7C,IAAAA,CAAK4C,KAAL5C,CAAWF,CAAAA,CAAOiE,MAAPjE,CAAc+C,CAAd/C,CAAXE,CAAP;AAAgC6C;AAlLrB,CARf;AAAA,IAgMMmB,CAAAA,GAAU,YAAA;AAAA,SAAMtD,CAAAA,CAAS,SAATA,EAAoB,EAApBA,CAAN;AAA0B,CAhM1C;AAAA,IAiMMuD,CAAAA,GAAU,UAACC,CAAD,EAACA;AAAAA,SAAOlB,CAAAA,CAAS,SAATA,EAAoBkB,CAApBlB,CAAPkB;AAA2BA,CAjM5C;AAAA,IAmMMvD,CAAAA,GAAU,UAACF,CAAD,EAACA;AACf,SAAO0D,CAAAA,CAAM,YAAA;AAAA,WAAMH,CAAAA,GAAUI,IAAVJ,CAAe,UAACK,CAAD,EAACA;AAAAA,aAASA,CAAAA,CAAK5D,KAAL4D,KAAe5D,CAAxB4D;AAAwB5D,KAAxCuD,CAAN;AAA8CvD,GAApD0D,CAAP;AAA2D1D,CApM7D;AAAA,IAuMMS,CAAAA,GAAiB,UAACF,CAAD,EAACA;AACtB,SAAOmD,CAAAA,CAAM,YAAA;AAAA,WACXH,CAAAA,GAAUI,IAAVJ,CAAe,UAACK,CAAD,EAACA;AACd,aAAOA,CAAAA,CAAKvD,IAALuD,CAAUrD,KAAVqD,KAAoBrD,CAA3B;AAA2BA,KAD7BgD,CADW;AAEkBhD,GAFxBmD,CAAP;AAE+BnD,CA1MjC;AAAA,IA+MMM,CAAAA,GAAU,UAACT,CAAD,EAACA;AACf,SAAOsD,CAAAA,CAAM,YAAA;AACX,QAAMG,CAAAA,GAAMN,CAAAA,EAAZ;AACAM,IAAAA,CAAAA,CAAIC,IAAJD,CAASzD,CAATyD,GACAL,CAAAA,CAAQK,CAARL,CADAK;AACQA,GAHHH,CAAP;AAGUG,CAnNZ;AAAA,IAuNMb,CAAAA,GAA2B,UAACe,CAAD,EAACA;AAChC,MAAM3B,CAAAA,GAAcnC,CAAAA,CAAS,cAATA,CAApB;AACA,MAAA,CAAKmC,CAAL,EACE,MAAA,IAAU1B,CAAV,CACE,oBADF,EACE,8CADF,CAAA;AAMF,SAAOmC,CAAAA,CAAWT,CAAXS,EAAwBkB,CAAxBlB,CAAP;AAA+BkB,CAhOjC;AAAA,IAmOMlB,CAAAA,GAAa,UAAC7C,CAAD,EAAQ+D,CAAR,EAAQA;AACzB,SAAA,KAAA,CAAA,KADyBA,CACzB,KADyBA,CAAAA,GAAW,EACpC,GAAOL,CAAAA,CAAM,YAAA;AACX,QAAMG,CAAAA,GAAMN,CAAAA,EAAZ;AAAA,QACMS,CAAAA,GAAQH,CAAAA,CAAII,SAAJJ,CAAc,UAACD,CAAD,EAACA;AAAAA,aAASA,CAAAA,CAAK5D,KAAL4D,KAAe5D,CAAxB4D;AAAwB5D,KAAvC6D,CADd;AAGA,WAAA,CAAe,CAAf,KAAIG,CAAJ,KACEH,CAAAA,CAAIG,CAAJH,CAAAA,GAAIG,CAAAA,CAAAA,EAAAA,EACCH,CAAAA,CAAIG,CAAJH,CADDG,EACKA;AACP3D,MAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAAAA,EACKwD,CAAAA,CAAIG,CAAJH,CAAAA,CAAWxD,IADhBA,EACgBA,EADhBA,EAEK0D,CAFL1D;AADO2D,KADLA,CAAJH,EAQAL,CAAAA,CAAQK,CAARL,CARAK,EASOA,CAAAA,CAAIG,CAAJH,CAVT,CAAA;AAUaG,GAdRN,CAAP;AAceM,CAlPjB;AAAA,IAyPM5C,CAAAA,GAAoB,UAACD,CAAD,EAACA;AAOzB,SAFA+C,CAAAA,IAEOzD,CAAAA,CAJgB,gBAIhBA,CAAAA,CAA+BN,IAA/BM,CAAoC,UAACL,CAAD,EAACA;AAC1C,WAAA,CAAA,CAAA,EAAA,EACKA,CADL,EACKA;AACHC,MAAAA,IAAAA,EAAAA,CAAAA,CAAAA,EAAAA,EACKD,CAAAA,CAAKC,IADVA,EACUA;AAGRc,QAAAA,QAAAA,EAAUA;AAHFd,OADVA;AADGD,KADL,CAAA;AAMce,GAPTV,CAAP;AAOgBU,CAvQlB;;AA+QA,SAASlB,CAAT,CAAkBgC,CAAlB,EAAuBkC,CAAvB,EAAuBA;AAAAA,OAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAe,IAAfA;AACrB,MAAMC,CAAAA,GAAQrC,MAAAA,CAAOsC,YAAPtC,CAAoBuC,OAApBvC,CAA+BE,CAAAA,GAAAA,MAA/BF,CAAd;AACA,SAAOqC,CAAAA,GAAQ7E,IAAAA,CAAK4C,KAAL5C,CAAW6E,CAAX7E,CAAR6E,GAA4BD,CAAnC;AAGF;;AAAA,SAAS5B,CAAT,CAAkBN,CAAlB,EAAuBmC,CAAvB,EAAuBA;AACrBrC,EAAAA,MAAAA,CAAOsC,YAAPtC,CAAoBwC,OAApBxC,CACKE,CAAAA,GAAAA,MADLF,EAEExC,IAAAA,CAAKC,SAALD,CAAe6E,CAAf7E,CAFFwC;AAUF;;AAAA,IAAM2B,CAAAA,GAAQ,UAAC/B,CAAD,EAACA;AACb,SAAA,IAAWH,OAAX,CAAmB,UAACC,CAAD,EAACA;AAAAA,WAClBgD,UAAAA,CAAW,YAAA;AACThD,MAAAA,CAAAA,CAAQE,CAAAA,EAARF,CAAAA;AAAQE,KADV8C,EAjSmB,GAiSnBA,CADkBhD;AAhSC,GAgSrB,CAAA;AAhSqB,CA+RvB;;AAQA,SAASf,CAAT,CAAqBiC,CAArB,EAA2B+B,CAA3B,EAA2BA;AACzB,MAAMC,CAAAA,GAAQ,IAAIC,KAAJ,CAAUF,CAAV,CAAd;AAEA,SADAC,CAAAA,CAAMhC,IAANgC,GAAahC,CAAbgC,EACOA,CAAP;AAGFjE;;AAAAA,CAAAA,CAAYmE,SAAZnE,GAAwBoE,MAAAA,CAAOC,MAAPD,CAAcF,KAAAA,CAAMC,SAApBC,CAAxBpE;AAIA,IAAMsE,CAAAA,GAAc;AAClBrE,EAAAA,GAAAA,EAAKlB,CAAAA,EADa;AAElBc,EAAAA,KAAAA,EAAO,gBAFW;AAGlBC,EAAAA,QAAAA,EAAU;AAHQ,CAApB;AAAA,IAMMyE,CAAAA,GAAc;AAClB5E,EAAAA,IAAAA,EAAM2E,CADY;AAElBhF,EAAAA,KAAAA,EAAOb,CAAAA,CAAc6F,CAAd7F;AAFW,CANpB;;AAWA,SAAS+E,CAAT,GAASA;AASP,MAAA,CANcX,CAAAA,GAAUI,IAAVJ,CAAe,UAACK,CAAD,EAACA;AAC5B,WAAOA,CAAAA,CAAKvD,IAALuD,CAAUrD,KAAVqD,KAAoBoB,CAAAA,CAAYzE,KAAvC;AAAuCA,GAD3BgD,CAMd,EAAY;AACV,QAAMM,CAAAA,GAAMN,CAAAA,EAAZ;AACAM,IAAAA,CAAAA,CAAIC,IAAJD,CAASoB,CAATpB,GACAL,CAAAA,CAAQK,CAARL,CADAK;AACQA;AAKU;;AAAA,eAAA,OAAX9B,MAAW,IACpBmC,CAAAA,EADoB;AACpBA,eAAAA,CAAAA","sourcesContent":["import { Base64 } from \"js-base64\";\n\n// Delay to mimic slower network requests\nconst RESPONSE_DELAY = 200;\n// Can increment to prevent old storage data from being used\nconst STORAGE_VERSION = \"fa5\";\n// Function to generate a fake JWT token\nconst generateToken = (data) => Base64.encode(JSON.stringify(data));\n// Function to generate user uid\nconst generateUid = () => String(Math.floor(Math.random() * 10000));\n\nexport default {\n  onChangeCallback: null,\n\n  getCurrentUser: function () {\n    const token = storeGet(\"access-token\");\n    return getAuth(token).then((auth) => auth.user);\n  },\n\n  signup: function (email, password) {\n    return getAuthByEmail(email).then((auth) => {\n      // Throw error if email is already in use\n      if (auth) {\n        throw new CustomError(\n          \"auth/email-already-in-use\",\n          \"Email is already in use\"\n        );\n      }\n\n      // Create auth object\n      const user = { uid: generateUid(), email, password };\n      const newAuth = { user, token: generateToken(user) };\n      // Store auth object and signin user\n      return addAuth(newAuth).then(() => {\n        this.changeAccessToken(newAuth.token);\n        return newAuth;\n      });\n    });\n  },\n\n  signin: function (email, password) {\n    return getAuthByEmail(email).then((auth) => {\n      // If user found then check password\n      if (auth) {\n        // If password match singin user otherwise throw error\n        if (auth.user.password === password) {\n          this.changeAccessToken(auth.token);\n          return auth;\n        } else {\n          throw new CustomError(\"auth/wrong-password\", \"Password is wrong\");\n        }\n      } else {\n        // If user not found then throw error\n        throw new CustomError(\n          \"auth/user-not-found\",\n          \"Email does not have an account\"\n        );\n      }\n    });\n  },\n\n  signinWithProvider: function (provider) {\n    return getAuthByProvider(provider).then((auth) => {\n      this.changeAccessToken(auth.token);\n      return auth;\n    });\n  },\n\n  signout: async function () {\n    // Signout user\n    this.changeAccessToken(null);\n    return Promise.resolve();\n  },\n\n  onChange: function (cb) {\n    // Store callback function so we can also call within\n    // setAccessToken(). Necessary because storage event listener\n    // only fires when local storage is changed by another tab.\n    this.onChangeCallback = cb;\n\n    const handleTokenChange = (token) => {\n      getAuth(token).then((auth) => {\n        this.onChangeCallback(auth || false);\n      });\n    };\n\n    const listener = window.addEventListener(\n      \"storage\",\n      ({ key, newValue }) => {\n        if (key === \"access-token\") {\n          handleTokenChange(JSON.parse(newValue));\n        }\n      },\n      false\n    );\n\n    const accessToken = storeGet(\"access-token\");\n    handleTokenChange(accessToken);\n\n    // Return an unsubscribe function so consumer\n    // can unsubscribe when needed.\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  },\n\n  sendPasswordResetEmail: function (email) {\n    // Get the user token for the email address and use as password reset code.\n    // A real auth service would do this server-side and email\n    // the code to the provided email address.\n    // For testing we save the reset code to local storage and\n    // read in subsequent confirmPasswordReset() call.\n    return getAuthByEmail(email).then((auth) => {\n      if (auth) {\n        storeSet(\"auth-pass-reset-code\", auth.token);\n        console.log(\"Your one-time use password reset code:\", auth.token);\n        throw new CustomError(\n          \"auth/cannot-send-email\",\n          `You're using Fake Auth, which cannot send password reset emails. These emails normally contain a link to your site with a special reset code. But worry not! Fake Auth has stored the reset code locally in your browser so you can simply go to your change password page now and choose a new password. This enables you to fully test your password reset flow and error states without involving emails.`\n        );\n      } else {\n        throw new CustomError(\n          \"auth/user-not-found\",\n          \"Email does not have an account\"\n        );\n      }\n    });\n  },\n\n  confirmPasswordReset: function (password, code) {\n    let resetCode;\n    // If code was passed in\n    if (code) {\n      resetCode = code;\n    } else {\n      // Otherwise grab the code from local storage\n      resetCode = storeGet(\"auth-pass-reset-code\");\n      // Remove code from storage so it's one-time use.\n      storeRemove(\"auth-pass-reset-code\");\n    }\n\n    return updateAuth(resetCode, { password }).then((updatedAuth) => {\n      if (updatedAuth) {\n        return true;\n      } else {\n        throw new CustomError(\n          \"auth/invalid-action-code\",\n          \"Invalid password update code\"\n        );\n      }\n    });\n  },\n\n  updateEmail: function (email) {\n    return updateAuthForCurrentUser({ email }).then((updatedAuth) => {\n      return updatedAuth.user;\n    });\n  },\n\n  updatePassword: function (password) {\n    return updateAuthForCurrentUser({ password }).then((updatedAuth) => {\n      return updatedAuth.user;\n    });\n  },\n\n  updateProfile: function (data) {\n    return updateAuthForCurrentUser(data).then((updatedAuth) => {\n      return updatedAuth.user;\n    });\n  },\n\n  // Updates access token in storage and calls onChangeCallback()\n  changeAccessToken: function (accessToken) {\n    storeSet(\"access-token\", accessToken);\n    // If we have an onChangeCallback (set in this.onChange)\n    if (this.onChangeCallback) {\n      // Fetch user via accessToken and pass to callback\n      getAuth(accessToken).then((auth) => {\n        this.onChangeCallback(auth || false);\n      });\n    }\n  },\n\n  getAccessToken: function () {\n    return storeGet(\"access-token\");\n  },\n\n  // Used server-side to verify and decode access token\n  verifyAccessToken: function (accessToken) {\n    return JSON.parse(Base64.decode(accessToken));\n  },\n};\n\n/***** LOCAL DB *****/\n\nconst _getAll = () => storeGet(\"auth-db\", []);\nconst _setAll = (db) => storeSet(\"auth-db\", db);\n\nconst getAuth = (token) => {\n  return delay(() => _getAll().find((item) => item.token === token));\n};\n\nconst getAuthByEmail = (email) => {\n  return delay(() =>\n    _getAll().find((item) => {\n      return item.user.email === email;\n    })\n  );\n};\n\nconst addAuth = (auth) => {\n  return delay(() => {\n    const all = _getAll();\n    all.push(auth);\n    _setAll(all);\n  });\n};\n\nconst updateAuthForCurrentUser = (userData) => {\n  const accessToken = storeGet(\"access-token\");\n  if (!accessToken) {\n    throw new CustomError(\n      \"auth/not-signed-in\",\n      `You must be signed in to perform this action`\n    );\n  }\n\n  return updateAuth(accessToken, userData);\n};\n\nconst updateAuth = (token, userData = {}) => {\n  return delay(() => {\n    const all = _getAll();\n    const index = all.findIndex((item) => item.token === token);\n\n    if (index !== -1) {\n      all[index] = {\n        ...all[index],\n        user: {\n          ...all[index].user,\n          ...userData,\n        },\n      };\n\n      _setAll(all);\n      return all[index];\n    } else {\n      return false;\n    }\n  });\n};\n\nconst getAuthByProvider = (provider) => {\n  // Normally there would be an actual OAuth flow here that returns\n  // the user's email address and provider data.\n  const emailFromOauth = \"demo@gmail.com\";\n  // First ensure user with above email exists in db\n  initializeDb();\n\n  return getAuthByEmail(emailFromOauth).then((auth) => {\n    return {\n      ...auth,\n      user: {\n        ...auth.user,\n        // Include provider in user object\n        // TODO: Persist this to storage\n        provider: provider,\n      },\n    };\n  });\n};\n\n/***** HELPERS *****/\n\nfunction storeGet(key, defaultValue = null) {\n  const value = window.localStorage.getItem(`${key}-${STORAGE_VERSION}`);\n  return value ? JSON.parse(value) : defaultValue;\n}\n\nfunction storeSet(key, value) {\n  window.localStorage.setItem(\n    `${key}-${STORAGE_VERSION}`,\n    JSON.stringify(value)\n  );\n}\n\nfunction storeRemove(key) {\n  window.localStorage.removeItem(`${key}-${STORAGE_VERSION}`);\n}\n\nconst delay = (cb) => {\n  return new Promise((resolve) =>\n    setTimeout(() => {\n      resolve(cb());\n    }, RESPONSE_DELAY)\n  );\n};\n\nfunction CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}\n\nCustomError.prototype = Object.create(Error.prototype);\n\n/***** INITIALIZE *****/\n\nconst initialUser = {\n  uid: generateUid(),\n  email: \"demo@gmail.com\",\n  password: \"demo\",\n};\n\nconst initialAuth = {\n  user: initialUser,\n  token: generateToken(initialUser),\n};\n\nfunction initializeDb() {\n  // See if initialUser is in db\n  // _getAll() will return an empty array if db is not in local storage yet\n  const found = _getAll().find((item) => {\n    return item.user.email === initialUser.email;\n  });\n\n  // If initialUser not in db then add them\n  // This will create the db in local storage if it previously didn't exist\n  if (!found) {\n    const all = _getAll();\n    all.push(initialAuth);\n    _setAll(all);\n  }\n}\n\n// Initialize db if client-side\nif (typeof window !== \"undefined\") {\n  initializeDb();\n}\n"]},"metadata":{},"sourceType":"module"}