{"ast":null,"code":"import { hasCookieSupport, getCookie, setCookie, removeCookie } from '@analytics/cookie-utils';\nexport { getCookie, setCookie, removeCookie, hasCookieSupport } from '@analytics/cookie-utils';\n\nfunction hasLocalStorage() {\n  try {\n    if (typeof localStorage === 'undefined' || typeof JSON === 'undefined') {\n      return false;\n    } // test for safari private\n\n\n    localStorage.setItem('_t_', '1');\n    localStorage.removeItem('_t_');\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction parse(input) {\n  var value;\n\n  try {\n    value = JSON.parse(input);\n\n    if (typeof value === 'undefined') {\n      value = input;\n    }\n\n    if (value === 'true') {\n      value = true;\n    }\n\n    if (value === 'false') {\n      value = false;\n    }\n\n    if (parseFloat(value) === value && _typeof(value) !== 'object') {\n      value = parseFloat(value);\n    }\n  } catch (e) {\n    value = input;\n  }\n\n  return value;\n}\n\nvar globalContext = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === 'object' && self.self === self && self || (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === 'object' && global.global === global && global || undefined;\nvar LOCAL_STORAGE = 'localStorage';\nvar COOKIE = 'cookie';\nvar GLOBAL = 'global'; // Verify support\n\nvar hasStorage = hasLocalStorage();\nvar hasCookies = hasCookieSupport();\n/**\n * Get storage item from localStorage, cookie, or window\n * @param  {string} key - key of item to get\n * @param  {object|string} [options] - storage options. If string location of where to get storage\n * @param  {string} [options.storage] - Define type of storage to pull from.\n * @return {Any}  the value of key\n */\n\nfunction getItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return null;\n  var storageType = getStorageType(options); // Get value from all locations\n\n  if (storageType === 'all') return getAll(key);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    var value = localStorage.getItem(key);\n    if (value || storageType === LOCAL_STORAGE) return parse(value);\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    var _value = getCookie(key);\n\n    if (_value || storageType === COOKIE) return parse(_value);\n  }\n  /* 3. Fallback to window/global. */\n\n\n  return globalContext[key] || null;\n}\n\nfunction getAll(key) {\n  return {\n    cookie: parse(getCookie(key)),\n    localStorage: parse(localStorage.getItem(key)),\n    global: globalContext[key] || null\n  };\n}\n/**\n * Store values in localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {*} value - value of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n * @returns {object} returns old value, new values, & location of storage\n */\n\n\nfunction setItem(key, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!key || !value) return false;\n  var storageType = getStorageType(options);\n  var saveValue = JSON.stringify(value);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    // console.log('SET as localstorage', saveValue)\n    var _oldValue = parse(localStorage.getItem(key));\n\n    localStorage.setItem(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue,\n      location: LOCAL_STORAGE\n    };\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    // console.log('SET as cookie', saveValue)\n    var _oldValue2 = parse(getCookie(key));\n\n    setCookie(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue2,\n      location: COOKIE\n    };\n  }\n  /* 3. Fallback to window/global */\n\n\n  var oldValue = globalContext[key];\n  globalContext[key] = value;\n  return {\n    value: value,\n    oldValue: oldValue,\n    location: GLOBAL\n  };\n}\n/**\n * Remove values from localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n */\n\n\nfunction removeItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return false;\n  var storageType = getStorageType(options);\n\n  if (useLocal(storageType)) {\n    /* 1. Try localStorage */\n    localStorage.removeItem(key);\n    return LOCAL_STORAGE;\n  } else if (useCookie(storageType)) {\n    /* 2. Fallback to cookie */\n    removeCookie(key);\n    return COOKIE;\n  }\n  /* 3. Fallback to window/global */\n\n\n  globalContext[key] = undefined;\n  return GLOBAL;\n}\n\nfunction getStorageType(options) {\n  return typeof options === 'string' ? options : options.storage;\n}\n\nfunction useLocal(storage) {\n  return hasStorage && (!storage || storage === LOCAL_STORAGE);\n}\n\nfunction useCookie(storage) {\n  return hasCookies && (!storage || storage === COOKIE);\n}\n\nvar index = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\nexport default index;\nexport { getItem, setItem, removeItem, globalContext, hasLocalStorage as hasLocalStorageSupport };","map":{"version":3,"sources":["/usr/src/app/node_modules/@analytics/storage-utils/lib/analytics-util-storage.browser.es.js"],"names":["hasCookieSupport","getCookie","setCookie","removeCookie","hasLocalStorage","localStorage","JSON","setItem","removeItem","err","_typeof","obj","Symbol","iterator","constructor","prototype","parse","input","value","parseFloat","e","globalContext","self","global","undefined","LOCAL_STORAGE","COOKIE","GLOBAL","hasStorage","hasCookies","getItem","key","options","arguments","length","storageType","getStorageType","getAll","useLocal","useCookie","_value","cookie","saveValue","stringify","_oldValue","oldValue","location","_oldValue2","storage","index","hasLocalStorageSupport"],"mappings":"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","sourcesContent":["import { hasCookieSupport, getCookie, setCookie, removeCookie } from '@analytics/cookie-utils';\nexport { getCookie, setCookie, removeCookie, hasCookieSupport } from '@analytics/cookie-utils';\n\nfunction hasLocalStorage() {\n\n  try {\n    if (typeof localStorage === 'undefined' || typeof JSON === 'undefined') {\n      return false;\n    } // test for safari private\n\n\n    localStorage.setItem('_t_', '1');\n    localStorage.removeItem('_t_');\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction parse(input) {\n  var value;\n\n  try {\n    value = JSON.parse(input);\n\n    if (typeof value === 'undefined') {\n      value = input;\n    }\n\n    if (value === 'true') {\n      value = true;\n    }\n\n    if (value === 'false') {\n      value = false;\n    }\n\n    if (parseFloat(value) === value && _typeof(value) !== 'object') {\n      value = parseFloat(value);\n    }\n  } catch (e) {\n    value = input;\n  }\n\n  return value;\n}\n\nvar globalContext = (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) === 'object' && self.self === self && self || (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) === 'object' && global.global === global && global || undefined;\n\nvar LOCAL_STORAGE = 'localStorage';\nvar COOKIE = 'cookie';\nvar GLOBAL = 'global'; // Verify support\n\nvar hasStorage = hasLocalStorage();\nvar hasCookies = hasCookieSupport();\n/**\n * Get storage item from localStorage, cookie, or window\n * @param  {string} key - key of item to get\n * @param  {object|string} [options] - storage options. If string location of where to get storage\n * @param  {string} [options.storage] - Define type of storage to pull from.\n * @return {Any}  the value of key\n */\n\nfunction getItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return null;\n  var storageType = getStorageType(options); // Get value from all locations\n\n  if (storageType === 'all') return getAll(key);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    var value = localStorage.getItem(key);\n    if (value || storageType === LOCAL_STORAGE) return parse(value);\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    var _value = getCookie(key);\n\n    if (_value || storageType === COOKIE) return parse(_value);\n  }\n  /* 3. Fallback to window/global. */\n\n\n  return globalContext[key] || null;\n}\n\nfunction getAll(key) {\n  return {\n    cookie: parse(getCookie(key)),\n    localStorage: parse(localStorage.getItem(key)),\n    global: globalContext[key] || null\n  };\n}\n/**\n * Store values in localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {*} value - value of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n * @returns {object} returns old value, new values, & location of storage\n */\n\n\nfunction setItem(key, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!key || !value) return false;\n  var storageType = getStorageType(options);\n  var saveValue = JSON.stringify(value);\n  /* 1. Try localStorage */\n\n  if (useLocal(storageType)) {\n    // console.log('SET as localstorage', saveValue)\n    var _oldValue = parse(localStorage.getItem(key));\n\n    localStorage.setItem(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue,\n      location: LOCAL_STORAGE\n    };\n  }\n  /* 2. Fallback to cookie */\n\n\n  if (useCookie(storageType)) {\n    // console.log('SET as cookie', saveValue)\n    var _oldValue2 = parse(getCookie(key));\n\n    setCookie(key, saveValue);\n    return {\n      value: value,\n      oldValue: _oldValue2,\n      location: COOKIE\n    };\n  }\n  /* 3. Fallback to window/global */\n\n\n  var oldValue = globalContext[key];\n  globalContext[key] = value;\n  return {\n    value: value,\n    oldValue: oldValue,\n    location: GLOBAL\n  };\n}\n/**\n * Remove values from localStorage, cookie, or window\n * @param {string} key - key of item to set\n * @param {object|string} [options] - storage options. If string location of where to get storage\n * @param {string} [options.storage] - Define type of storage to pull from.\n */\n\nfunction removeItem(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!key) return false;\n  var storageType = getStorageType(options);\n\n  if (useLocal(storageType)) {\n    /* 1. Try localStorage */\n    localStorage.removeItem(key);\n    return LOCAL_STORAGE;\n  } else if (useCookie(storageType)) {\n    /* 2. Fallback to cookie */\n    removeCookie(key);\n    return COOKIE;\n  }\n  /* 3. Fallback to window/global */\n\n\n  globalContext[key] = undefined;\n  return GLOBAL;\n}\n\nfunction getStorageType(options) {\n  return typeof options === 'string' ? options : options.storage;\n}\n\nfunction useLocal(storage) {\n  return hasStorage && (!storage || storage === LOCAL_STORAGE);\n}\n\nfunction useCookie(storage) {\n  return hasCookies && (!storage || storage === COOKIE);\n}\nvar index = {\n  getItem: getItem,\n  setItem: setItem,\n  removeItem: removeItem\n};\n\nexport default index;\nexport { getItem, setItem, removeItem, globalContext, hasLocalStorage as hasLocalStorageSupport };\n"]},"metadata":{},"sourceType":"module"}