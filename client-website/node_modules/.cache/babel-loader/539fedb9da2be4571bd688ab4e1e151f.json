{"ast":null,"code":"import fakeAuth from \"fake-auth\";\nexport function apiRequest(path, method = \"GET\", data) {\n  const accessToken = fakeAuth.getAccessToken();\n  return fetch(`/api/${path}`, {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`\n    },\n    body: data ? JSON.stringify(data) : undefined\n  }).then(response => response.json()).then(response => {\n    if (response.status === \"error\") {\n      // Automatically signout user if accessToken is no longer valid\n      if (response.code === \"auth/invalid-user-token\") {\n        fakeAuth.signout();\n      }\n\n      throw new CustomError(response.code, response.message);\n    } else {\n      return response.data;\n    }\n  });\n} // Create an Error with custom message and code\n\nexport function CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}","map":{"version":3,"sources":["/usr/src/app/src/util/util.js"],"names":["fakeAuth","apiRequest","path","method","data","accessToken","getAccessToken","fetch","headers","Authorization","body","JSON","stringify","undefined","then","response","json","status","code","signout","CustomError","message","error","Error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,MAAM,GAAG,KAAnC,EAA0CC,IAA1C,EAAgD;AACrD,QAAMC,WAAW,GAAGL,QAAQ,CAACM,cAAT,EAApB;AAEA,SAAOC,KAAK,CAAE,QAAOL,IAAK,EAAd,EAAiB;AAC3BC,IAAAA,MAAM,EAAEA,MADmB;AAE3BK,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAG,UAASJ,WAAY;AAF9B,KAFkB;AAM3BK,IAAAA,IAAI,EAAEN,IAAI,GAAGO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAH,GAA0BS;AANT,GAAjB,CAAL,CAQJC,IARI,CAQEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARf,EASJF,IATI,CASEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACE,MAAT,KAAoB,OAAxB,EAAiC;AAC/B;AACA,UAAIF,QAAQ,CAACG,IAAT,KAAkB,yBAAtB,EAAiD;AAC/ClB,QAAAA,QAAQ,CAACmB,OAAT;AACD;;AAED,YAAM,IAAIC,WAAJ,CAAgBL,QAAQ,CAACG,IAAzB,EAA+BH,QAAQ,CAACM,OAAxC,CAAN;AACD,KAPD,MAOO;AACL,aAAON,QAAQ,CAACX,IAAhB;AACD;AACF,GApBI,CAAP;AAqBD,C,CAED;;AACA,OAAO,SAASgB,WAAT,CAAqBF,IAArB,EAA2BG,OAA3B,EAAoC;AACzC,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,OAAV,CAAd;AACAC,EAAAA,KAAK,CAACJ,IAAN,GAAaA,IAAb;AACA,SAAOI,KAAP;AACD","sourcesContent":["import fakeAuth from \"fake-auth\";\n\nexport function apiRequest(path, method = \"GET\", data) {\n  const accessToken = fakeAuth.getAccessToken();\n\n  return fetch(`/api/${path}`, {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: data ? JSON.stringify(data) : undefined,\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status === \"error\") {\n        // Automatically signout user if accessToken is no longer valid\n        if (response.code === \"auth/invalid-user-token\") {\n          fakeAuth.signout();\n        }\n\n        throw new CustomError(response.code, response.message);\n      } else {\n        return response.data;\n      }\n    });\n}\n\n// Create an Error with custom message and code\nexport function CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}\n"]},"metadata":{},"sourceType":"module"}