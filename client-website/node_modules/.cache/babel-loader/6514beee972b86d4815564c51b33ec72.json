{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/SettingsGeneral.js\";\nimport React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsGeneral(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    // Show pending indicator\n    setPending(true);\n    return auth.updateProfile(data).then(() => {\n      // Set success status\n      props.onStatus({\n        type: \"success\",\n        message: \"Your profile has been updated\"\n      });\n    }).catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit(data)\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"name\",\n    type: \"text\",\n    label: \"Name\",\n    defaultValue: auth.user.name,\n    placeholder: \"Name\",\n    error: errors.name,\n    inputRef: register({\n      required: \"Please enter your name\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"email\",\n    type: \"email\",\n    label: \"Email Address\",\n    defaultValue: auth.user.email,\n    placeholder: \"Email\",\n    error: errors.email,\n    inputRef: register({\n      required: \"Please enter your email\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: pending,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Save\"), pending && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": true,\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Sending...\"))));\n}\n\nexport default SettingsGeneral;","map":{"version":3,"sources":["/usr/src/app/src/components/SettingsGeneral.js"],"names":["React","useState","Form","FormField","Button","Spinner","useAuth","useForm","SettingsGeneral","props","auth","pending","setPending","register","handleSubmit","errors","onSubmit","data","updateProfile","then","onStatus","type","message","catch","error","code","callback","finally","user","name","required","email"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsGeneral(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n\n  const { register, handleSubmit, errors } = useForm();\n\n  const onSubmit = (data) => {\n    // Show pending indicator\n    setPending(true);\n\n    return auth\n      .updateProfile(data)\n      .then(() => {\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your profile has been updated\",\n        });\n      })\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit(data),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Form.Group controlId=\"formName\">\n        <FormField\n          name=\"name\"\n          type=\"text\"\n          label=\"Name\"\n          defaultValue={auth.user.name}\n          placeholder=\"Name\"\n          error={errors.name}\n          inputRef={register({\n            required: \"Please enter your name\",\n          })}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"formEmail\">\n        <FormField\n          name=\"email\"\n          type=\"email\"\n          label=\"Email Address\"\n          defaultValue={auth.user.email}\n          placeholder=\"Email\"\n          error={errors.email}\n          inputRef={register({\n            required: \"Please enter your email\",\n          })}\n        />\n      </Form.Group>\n      <Button type=\"submit\" disabled={pending}>\n        <span>Save</span>\n\n        {pending && (\n          <Spinner\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden={true}\n            className=\"ml-2\"\n          >\n            <span className=\"sr-only\">Sending...</span>\n          </Spinner>\n        )}\n      </Button>\n    </Form>\n  );\n}\n\nexport default SettingsGeneral;\n"]},"metadata":{},"sourceType":"module"}