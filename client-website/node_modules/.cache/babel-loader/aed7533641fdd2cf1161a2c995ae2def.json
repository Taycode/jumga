{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/util/auth.js\";\nimport React, { useState, useEffect, useMemo, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport fakeAuth from \"fake-auth\";\nimport { useUser, createUser, updateUser } from \"./db\";\nimport { history } from \"./router\";\nimport PageLoader from \"./../components/PageLoader\";\nimport analytics from \"./analytics\"; // Whether to merge extra user data from database into auth.user\n\nconst MERGE_DB_USER = true; // Whether to connect analytics session to user.uid\n\nconst ANALYTICS_IDENTIFY = false;\nconst authContext = createContext(); // Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\n\nexport function ProvideAuth({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }, children);\n} // Hook that enables any component to subscribe to auth state\n\nexport const useAuth = () => {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  // Store auth user object\n  const [user, setUser] = useState(null); // Format final user object and merge extra data from database\n\n  const finalUser = usePrepareUser(user); // Connect analytics session to user\n\n  useIdentifyUser(finalUser); // Handle response from authentication functions\n\n  const handleAuth = async user => {\n    // Create the user in the database\n    // fake-auth doesn't indicate if they are new so we attempt to create user every time\n    await createUser(user.uid, {\n      email: user.email\n    }); // Update user in state\n\n    setUser(user);\n    return user;\n  };\n\n  const signup = (email, password) => {\n    return fakeAuth.signup(email, password).then(response => handleAuth(response.user));\n  };\n\n  const signin = (email, password) => {\n    return fakeAuth.signin(email, password).then(response => handleAuth(response.user));\n  };\n\n  const signinWithProvider = name => {\n    return fakeAuth.signinWithProvider(name).then(response => handleAuth(response.user));\n  };\n\n  const signout = () => {\n    return fakeAuth.signout();\n  };\n\n  const sendPasswordResetEmail = email => {\n    return fakeAuth.sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // [INTEGRATING AN AUTH SERVICE]: If not passing in \"code\" as the second\n    // arg above then make sure getFromQueryString() below has the correct\n    // url parameter name (it might not be \"code\").\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"code\");\n    return fakeAuth.confirmPasswordReset(password, resetCode);\n  };\n\n  const updateEmail = email => {\n    return fakeAuth.updateEmail(email).then(rawUser => {\n      setUser(rawUser);\n    });\n  };\n\n  const updatePassword = password => {\n    return fakeAuth.updatePassword(password);\n  }; // Update auth user and persist to database (including any custom values in data)\n  // Forms can call this function instead of multiple auth/db update functions\n\n\n  const updateProfile = async data => {\n    const {\n      email,\n      name,\n      picture\n    } = data; // Update auth email\n\n    if (email) {\n      await fakeAuth.updateEmail(email);\n    } // Update auth profile fields\n\n\n    if (name || picture) {\n      let fields = {};\n      if (name) fields.name = name;\n      if (picture) fields.picture = picture;\n      await fakeAuth.updateProfile(fields);\n    } // Persist all data to the database\n\n\n    await updateUser(user.uid, data); // Update user in state\n\n    const currentUser = await fakeAuth.getCurrentUser();\n    setUser(currentUser);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = fakeAuth.onChange(async response => {\n      if (response.user) {\n        setUser(response.user);\n      } else {\n        setUser(false);\n      }\n    }); // Unsubscribe on cleanup\n\n    return () => unsubscribe();\n  }, []);\n  return {\n    user: finalUser,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n    updateProfile\n  };\n} // Format final user object and merge extra data from database\n\n\nfunction usePrepareUser(user) {\n  // Fetch extra data from database (if enabled and auth user has been fetched)\n  const userDbQuery = useUser(MERGE_DB_USER && user && user.uid); // Memoize so we only create a new object if user or userDbQuery changes\n\n  return useMemo(() => {\n    // Return if auth user is null (loading) or false (not authenticated)\n    if (!user) return user; // Data we want to include from auth user object\n\n    let finalUser = {\n      uid: user.uid,\n      email: user.email,\n      name: user.name,\n      picture: user.picture\n    }; // Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n    // Components can read this to prompt user to re-auth with the correct provider\n\n    finalUser.providers = [user.provider]; // If merging user data from database is enabled ...\n\n    if (MERGE_DB_USER) {\n      switch (userDbQuery.status) {\n        case \"idle\":\n          // Return null user until we have db data to merge\n          return null;\n\n        case \"loading\":\n          return null;\n\n        case \"error\":\n          // Log query error to console\n          console.error(userDbQuery.error);\n          return null;\n\n        case \"success\":\n          // If user data doesn't exist we assume this means user just signed up and the createUser\n          // function just hasn't completed. We return null to indicate a loading state.\n          if (userDbQuery.data === null) return null; // Merge user data from database into finalUser object\n\n          Object.assign(finalUser, userDbQuery.data);\n        // no default\n      }\n    }\n\n    return finalUser;\n  }, [user, userDbQuery]);\n} // A Higher Order Component for requiring authentication\n\n\nexport const requireAuth = Component => {\n  return props => {\n    // Get authenticated user\n    const auth = useAuth();\n    useEffect(() => {\n      // Redirect if not signed in\n      if (auth.user === false) {\n        history.replace(\"/auth/signin\");\n      }\n    }, [auth]); // Show loading indicator\n    // We're either loading (user is null) or we're about to redirect (user is false)\n\n    if (!auth.user) {\n      return /*#__PURE__*/React.createElement(PageLoader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 14\n        }\n      });\n    } // Render component now that we have user\n\n\n    return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 12\n      }\n    }));\n  };\n}; // Connect analytics session to current user.uid\n\nfunction useIdentifyUser(user) {\n  useEffect(() => {\n    if (ANALYTICS_IDENTIFY && user) {\n      analytics.identify(user.uid);\n    }\n  }, [user]);\n}\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};","map":{"version":3,"sources":["/usr/src/app/src/util/auth.js"],"names":["React","useState","useEffect","useMemo","useContext","createContext","queryString","fakeAuth","useUser","createUser","updateUser","history","PageLoader","analytics","MERGE_DB_USER","ANALYTICS_IDENTIFY","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","finalUser","usePrepareUser","useIdentifyUser","handleAuth","uid","email","signup","password","then","response","signin","signinWithProvider","name","signout","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","updateEmail","rawUser","updatePassword","updateProfile","data","picture","fields","currentUser","getCurrentUser","unsubscribe","onChange","userDbQuery","providers","provider","status","console","error","Object","assign","requireAuth","Component","props","replace","identify","key","parse","window","location","search"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useContext,\n  createContext,\n} from \"react\";\nimport queryString from \"query-string\";\nimport fakeAuth from \"fake-auth\";\nimport { useUser, createUser, updateUser } from \"./db\";\nimport { history } from \"./router\";\nimport PageLoader from \"./../components/PageLoader\";\n\nimport analytics from \"./analytics\";\n\n// Whether to merge extra user data from database into auth.user\nconst MERGE_DB_USER = true;\n\n// Whether to connect analytics session to user.uid\nconst ANALYTICS_IDENTIFY = false;\n\nconst authContext = createContext();\n\n// Context Provider component that wraps your app and makes auth object\n// available to any child component that calls the useAuth() hook.\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook that enables any component to subscribe to auth state\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  // Store auth user object\n  const [user, setUser] = useState(null);\n\n  // Format final user object and merge extra data from database\n  const finalUser = usePrepareUser(user);\n\n  // Connect analytics session to user\n  useIdentifyUser(finalUser);\n\n  // Handle response from authentication functions\n  const handleAuth = async (user) => {\n    // Create the user in the database\n    // fake-auth doesn't indicate if they are new so we attempt to create user every time\n    await createUser(user.uid, { email: user.email });\n\n    // Update user in state\n    setUser(user);\n    return user;\n  };\n\n  const signup = (email, password) => {\n    return fakeAuth\n      .signup(email, password)\n      .then((response) => handleAuth(response.user));\n  };\n\n  const signin = (email, password) => {\n    return fakeAuth\n      .signin(email, password)\n      .then((response) => handleAuth(response.user));\n  };\n\n  const signinWithProvider = (name) => {\n    return fakeAuth\n      .signinWithProvider(name)\n      .then((response) => handleAuth(response.user));\n  };\n\n  const signout = () => {\n    return fakeAuth.signout();\n  };\n\n  const sendPasswordResetEmail = (email) => {\n    return fakeAuth.sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // [INTEGRATING AN AUTH SERVICE]: If not passing in \"code\" as the second\n    // arg above then make sure getFromQueryString() below has the correct\n    // url parameter name (it might not be \"code\").\n\n    // Get code from query string object\n    const resetCode = code || getFromQueryString(\"code\");\n    return fakeAuth.confirmPasswordReset(password, resetCode);\n  };\n\n  const updateEmail = (email) => {\n    return fakeAuth.updateEmail(email).then((rawUser) => {\n      setUser(rawUser);\n    });\n  };\n\n  const updatePassword = (password) => {\n    return fakeAuth.updatePassword(password);\n  };\n\n  // Update auth user and persist to database (including any custom values in data)\n  // Forms can call this function instead of multiple auth/db update functions\n  const updateProfile = async (data) => {\n    const { email, name, picture } = data;\n\n    // Update auth email\n    if (email) {\n      await fakeAuth.updateEmail(email);\n    }\n\n    // Update auth profile fields\n    if (name || picture) {\n      let fields = {};\n      if (name) fields.name = name;\n      if (picture) fields.picture = picture;\n      await fakeAuth.updateProfile(fields);\n    }\n\n    // Persist all data to the database\n    await updateUser(user.uid, data);\n\n    // Update user in state\n    const currentUser = await fakeAuth.getCurrentUser();\n    setUser(currentUser);\n  };\n\n  useEffect(() => {\n    // Subscribe to user on mount\n    const unsubscribe = fakeAuth.onChange(async (response) => {\n      if (response.user) {\n        setUser(response.user);\n      } else {\n        setUser(false);\n      }\n    });\n\n    // Unsubscribe on cleanup\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user: finalUser,\n    signup,\n    signin,\n    signinWithProvider,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateEmail,\n    updatePassword,\n    updateProfile,\n  };\n}\n\n// Format final user object and merge extra data from database\nfunction usePrepareUser(user) {\n  // Fetch extra data from database (if enabled and auth user has been fetched)\n  const userDbQuery = useUser(MERGE_DB_USER && user && user.uid);\n\n  // Memoize so we only create a new object if user or userDbQuery changes\n  return useMemo(() => {\n    // Return if auth user is null (loading) or false (not authenticated)\n    if (!user) return user;\n\n    // Data we want to include from auth user object\n    let finalUser = {\n      uid: user.uid,\n      email: user.email,\n      name: user.name,\n      picture: user.picture,\n    };\n\n    // Include an array of user's auth providers, such as [\"password\", \"google\", etc]\n    // Components can read this to prompt user to re-auth with the correct provider\n    finalUser.providers = [user.provider];\n\n    // If merging user data from database is enabled ...\n    if (MERGE_DB_USER) {\n      switch (userDbQuery.status) {\n        case \"idle\":\n          // Return null user until we have db data to merge\n          return null;\n        case \"loading\":\n          return null;\n        case \"error\":\n          // Log query error to console\n          console.error(userDbQuery.error);\n          return null;\n        case \"success\":\n          // If user data doesn't exist we assume this means user just signed up and the createUser\n          // function just hasn't completed. We return null to indicate a loading state.\n          if (userDbQuery.data === null) return null;\n\n          // Merge user data from database into finalUser object\n          Object.assign(finalUser, userDbQuery.data);\n\n        // no default\n      }\n    }\n\n    return finalUser;\n  }, [user, userDbQuery]);\n}\n\n// A Higher Order Component for requiring authentication\nexport const requireAuth = (Component) => {\n  return (props) => {\n    // Get authenticated user\n    const auth = useAuth();\n\n    useEffect(() => {\n      // Redirect if not signed in\n      if (auth.user === false) {\n        history.replace(\"/auth/signin\");\n      }\n    }, [auth]);\n\n    // Show loading indicator\n    // We're either loading (user is null) or we're about to redirect (user is false)\n    if (!auth.user) {\n      return <PageLoader />;\n    }\n\n    // Render component now that we have user\n    return <Component {...props} />;\n  };\n};\n\n// Connect analytics session to current user.uid\nfunction useIdentifyUser(user) {\n  useEffect(() => {\n    if (ANALYTICS_IDENTIFY && user) {\n      analytics.identify(user.uid);\n    }\n  }, [user]);\n}\n\nconst getFromQueryString = (key) => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}