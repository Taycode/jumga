{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/components/SettingsPassword.js\";\nimport React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsPassword(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    getValues\n  } = useForm();\n\n  const onSubmit = data => {\n    // Show pending indicator\n    setPending(true);\n    auth.updatePassword(data.pass).then(() => {\n      // Clear form\n      reset(); // Set success status\n\n      props.onStatus({\n        type: \"success\",\n        message: \"Your password has been updated\"\n      });\n    }).catch(error => {\n      if (error.code === \"auth/requires-recent-login\") {\n        // Update state to show re-authentication modal\n        props.onStatus({\n          type: \"requires-recent-login\",\n          // Resubmit after reauth flow\n          callback: () => onSubmit({\n            pass: data.pass\n          })\n        });\n      } else {\n        // Set error status\n        props.onStatus({\n          type: \"error\",\n          message: error.message\n        });\n      }\n    }).finally(() => {\n      // Hide pending indicator\n      setPending(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"pass\",\n    type: \"password\",\n    label: \"New Password\",\n    placeholder: \"Password\",\n    error: errors.pass,\n    inputRef: register({\n      required: \"Please enter a password\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    name: \"confirmPass\",\n    type: \"password\",\n    label: \"Confirm New Password\",\n    placeholder: \"Confirm Password\",\n    error: errors.confirmPass,\n    inputRef: register({\n      required: \"Please enter your new password again\",\n      validate: value => {\n        if (value === getValues().pass) {\n          return true;\n        } else {\n          return \"This doesn't match your password\";\n        }\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: props.buttonColor,\n    size: props.inputSize,\n    type: \"submit\",\n    disabled: pending,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Save\"), pending && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": true,\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Sending...\"))));\n}\n\nexport default SettingsPassword;","map":{"version":3,"sources":["/usr/src/app/src/components/SettingsPassword.js"],"names":["React","useState","Form","FormField","Button","Spinner","useAuth","useForm","SettingsPassword","props","auth","pending","setPending","register","handleSubmit","errors","reset","getValues","onSubmit","data","updatePassword","pass","then","onStatus","type","message","catch","error","code","callback","finally","required","confirmPass","validate","value","buttonColor","inputSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormField from \"./FormField\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction SettingsPassword(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n\n  const { register, handleSubmit, errors, reset, getValues } = useForm();\n\n  const onSubmit = (data) => {\n    // Show pending indicator\n    setPending(true);\n\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <Form onSubmit={handleSubmit(onSubmit)}>\n      <Form.Group controlId=\"formName\">\n        <FormField\n          name=\"pass\"\n          type=\"password\"\n          label=\"New Password\"\n          placeholder=\"Password\"\n          error={errors.pass}\n          inputRef={register({\n            required: \"Please enter a password\",\n          })}\n        />\n      </Form.Group>\n      <Form.Group controlId=\"formEmail\">\n        <FormField\n          name=\"confirmPass\"\n          type=\"password\"\n          label=\"Confirm New Password\"\n          placeholder=\"Confirm Password\"\n          error={errors.confirmPass}\n          inputRef={register({\n            required: \"Please enter your new password again\",\n            validate: (value) => {\n              if (value === getValues().pass) {\n                return true;\n              } else {\n                return \"This doesn't match your password\";\n              }\n            },\n          })}\n        />\n      </Form.Group>\n      <Button\n        variant={props.buttonColor}\n        size={props.inputSize}\n        type=\"submit\"\n        disabled={pending}\n      >\n        <span>Save</span>\n\n        {pending && (\n          <Spinner\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden={true}\n            className=\"ml-2\"\n          >\n            <span className=\"sr-only\">Sending...</span>\n          </Spinner>\n        )}\n      </Button>\n    </Form>\n  );\n}\n\nexport default SettingsPassword;\n"]},"metadata":{},"sourceType":"module"}