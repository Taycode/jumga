{"ast":null,"code":"import { useQuery, queryCache } from \"react-query\";\nimport { apiRequest } from \"./util\";\n/**** USERS ****/\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\n\nexport function useUser(uid) {\n  // Unique cache key for this query\n  const cacheKey = [\"user\", {\n    uid\n  }]; // Query for fetching user\n\n  const query = () => apiRequest(`user-get?uid=${uid}`); // Fetch with react-query (only if we have a uid)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n\n\n  return useQuery(cacheKey, query, {\n    enabled: !!uid\n  });\n} // Update an existing user\n\nexport function updateUser(uid, data) {\n  // Send API request\n  return apiRequest(`user-update?uid=${uid}`, \"PATCH\", data).then(user => {\n    const cacheKey = [\"user\", {\n      uid\n    }]; // Update user in cache (causing components to re-render with new data)\n\n    queryCache.setQueryData(cacheKey, user); // Return the updated user\n\n    return user;\n  });\n} // Create a new user\n\nexport function createUser(uid, data) {\n  return apiRequest(\"user-create\", \"POST\", {\n    uid,\n    ...data\n  });\n}\n/**** ITEMS ****/\n\n/* Example query functions (modify to your needs) */\n// Fetch all items by owner (hook)\n\nexport function useItemsByOwner(owner) {\n  // Unique cache key for this query\n  const cacheKey = [\"items\", {\n    owner\n  }]; // Query for fetching items\n\n  const query = () => apiRequest(`items-get?owner=${owner}`); // Fetch data with react-query (only if we have an owner)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n\n\n  return useQuery(cacheKey, query, {\n    enabled: !!owner\n  });\n} // Fetch item data\n\nexport function useItem(id) {\n  // Unique cache key for this query\n  const cacheKey = [\"item\", {\n    id\n  }]; // Query for fetching item\n\n  const query = () => apiRequest(`item-get?id=${id}`); // Fetch data with react-query (only if we have an id)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n\n\n  return useQuery(cacheKey, query, {\n    enabled: !!id\n  });\n} // Update an item\n\nexport function updateItem(id, data) {\n  // Send API request\n  return apiRequest(`item-update?id=${id}`, \"PATCH\", data).then(item => {\n    const cacheKey = [\"item\", {\n      id: item.id\n    }]; // Update item in cache\n\n    queryCache.setQueryData(cacheKey, item); // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include updated item.\n\n    queryCache.invalidateQueries([\"items\", {\n      owner: item.owner\n    }]);\n    return item;\n  });\n} // Create a new item\n\nexport function createItem(data) {\n  return apiRequest(\"item-create\", \"POST\", data).then(item => {\n    // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include new item.\n    queryCache.invalidateQueries([\"items\", {\n      owner: item.owner\n    }]);\n    return item;\n  });\n}","map":{"version":3,"sources":["/usr/src/app/src/util/db.js"],"names":["useQuery","queryCache","apiRequest","useUser","uid","cacheKey","query","enabled","updateUser","data","then","user","setQueryData","createUser","useItemsByOwner","owner","useItem","id","updateItem","item","invalidateQueries","createItem"],"mappings":"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","sourcesContent":["import { useQuery, queryCache } from \"react-query\";\nimport { apiRequest } from \"./util\";\n\n/**** USERS ****/\n\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid) {\n  // Unique cache key for this query\n  const cacheKey = [\"user\", { uid }];\n  // Query for fetching user\n  const query = () => apiRequest(`user-get?uid=${uid}`);\n  // Fetch with react-query (only if we have a uid)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!uid });\n}\n\n// Update an existing user\nexport function updateUser(uid, data) {\n  // Send API request\n  return apiRequest(`user-update?uid=${uid}`, \"PATCH\", data).then((user) => {\n    const cacheKey = [\"user\", { uid }];\n    // Update user in cache (causing components to re-render with new data)\n    queryCache.setQueryData(cacheKey, user);\n    // Return the updated user\n    return user;\n  });\n}\n\n// Create a new user\nexport function createUser(uid, data) {\n  return apiRequest(\"user-create\", \"POST\", { uid, ...data });\n}\n\n/**** ITEMS ****/\n/* Example query functions (modify to your needs) */\n\n// Fetch all items by owner (hook)\nexport function useItemsByOwner(owner) {\n  // Unique cache key for this query\n  const cacheKey = [\"items\", { owner }];\n  // Query for fetching items\n  const query = () => apiRequest(`items-get?owner=${owner}`);\n  // Fetch data with react-query (only if we have an owner)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!owner });\n}\n\n// Fetch item data\nexport function useItem(id) {\n  // Unique cache key for this query\n  const cacheKey = [\"item\", { id }];\n  // Query for fetching item\n  const query = () => apiRequest(`item-get?id=${id}`);\n  // Fetch data with react-query (only if we have an id)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!id });\n}\n\n// Update an item\nexport function updateItem(id, data) {\n  // Send API request\n  return apiRequest(`item-update?id=${id}`, \"PATCH\", data).then((item) => {\n    const cacheKey = [\"item\", { id: item.id }];\n    // Update item in cache\n    queryCache.setQueryData(cacheKey, item);\n    // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include updated item.\n    queryCache.invalidateQueries([\"items\", { owner: item.owner }]);\n    return item;\n  });\n}\n\n// Create a new item\nexport function createItem(data) {\n  return apiRequest(\"item-create\", \"POST\", data).then((item) => {\n    // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include new item.\n    queryCache.invalidateQueries([\"items\", { owner: item.owner }]);\n    return item;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}