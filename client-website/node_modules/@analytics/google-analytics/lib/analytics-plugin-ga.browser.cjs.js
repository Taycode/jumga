'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* global ga */

/**
 * Google analytics plugin
 * @link https://getanalytics.io/plugins/google-analytics/
 * @link https://analytics.google.com/analytics/web/
 * @link https://developers.google.com/analytics/devguides/collection/analyticsjs
 * @param {object} pluginConfig - Plugin settings
 * @param {string} pluginConfig.trackingId - site tracking Id
 * @return {*}
 * @example
 *
 * googleAnalytics({
 *   trackingId: '123-xyz'
 * })
 */
function googleAnalytics$1() {
  var pluginConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // Allow for userland overides of base methods
  return {
    NAMESPACE: 'google-analytics',
    config: pluginConfig,
    initialize: initialize$1,
    // Google Analytics page view
    page: function page(_ref) {
      var payload = _ref.payload,
          config = _ref.config;
      var properties = payload.properties;
      pageView$1(properties.path);
    },

    /**
     * Google Analytics track event
     * @example
     *
     * analytics.track('playedVideo', {
     *   category: 'Videos',
     *   label: 'Fall Campaign',
     *   value: 42
     * })
     */
    track: function track(_ref2) {
      var payload = _ref2.payload,
          config = _ref2.config,
          instance = _ref2.instance;
      var properties = payload.properties,
          event = payload.event;
      var label = properties.label,
          value = properties.value,
          category = properties.category,
          nonInteraction = properties.nonInteraction;
      var campaign = instance.getState('context.campaign');
      trackEvent$1({
        hitType: 'event',
        event: event,
        label: label,
        category: category || 'All',
        value: value,
        nonInteraction: nonInteraction,
        campaign: campaign
      });
    },
    identify: function identify(_ref3) {
      var payload = _ref3.payload,
          config = _ref3.config;
      identifyVisitor$1(payload.userId);
      /* Todo implement custom dimensions
        http://bit.ly/2yULdOO & http://bit.ly/2NS5nOE
      // user mapping required
      ga('set', {
        'dimensionX': valueX,
        'dimensionY': valueY,
        'dimensionZ': valueZ
      })
      */
    },
    loaded: function loaded() {
      return !!window.gaplugins;
    }
  };
}

function gaNotLoaded() {
  return typeof ga === 'undefined';
}

function initialize$1(_ref4) {
  var config = _ref4.config;
  if (!config.trackingId) throw new Error('No google analytics trackingId defined');

  if (gaNotLoaded()) {
    /* eslint-disable */
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;
      i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments);
      }, i[r].l = 1 * new Date();
      a = s.createElement(o), m = s.getElementsByTagName(o)[0];
      a.async = 1;
      a.src = g;
      m.parentNode.insertBefore(a, m);
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
    /* eslint-enable */


    ga('create', config.trackingId, 'auto');

    if (config.debug) {
      // Disable sends to GA http://bit.ly/2Ro0vTR
      ga('set', 'sendHitTask', null);
      window.ga_debug = {
        trace: true
      };
    }
  }
}
/**
 * Send page view to google analytics
 * @param  {string} [urlPath = location.pathname] - path of current path
 */

function pageView$1(urlPath) {
  if (gaNotLoaded()) return;
  var path = urlPath || document.location.pathname;
  ga('set', 'page', path);
  ga('send', 'pageview');
}
/**
 * Send event tracking to Google Analytics
 * @param  {object} eventData - GA event payload
 * @param  {string} [eventData.hitType = 'event'] - hitType https://bit.ly/2Jab9L1 one of 'pageview', 'screenview', 'event', 'transaction', 'item', 'social', 'exception', 'timing'
 * @param  {string} [eventData.event] - event Action https://bit.ly/2CUzeoz
 * @param  {string} [eventData.label] - event Label http://bit.ly/2oo8eb3
 * @param  {string} [eventData.category] - event Category http://bit.ly/2EAy9UP
 * @param  {string} [eventData.nonInteraction = false] - nonInteraction https://bit.ly/2CUzeoz
 * @return {object} sent data
 */

function trackEvent$1(eventData) {
  if (gaNotLoaded()) return;
  var data = {
    // hitType https://bit.ly/2Jab9L1 one of 'pageview', 'screenview', 'event', 'transaction', 'item', 'social', 'exception', 'timing'
    hitType: eventData.hitType || 'event',
    // eventAction https://bit.ly/2CUzeoz
    eventAction: eventData.event,
    // eventLabel http://bit.ly/2oo8eb3
    eventLabel: eventData.label,
    // eventCategory http://bit.ly/2EAy9UP
    eventCategory: eventData.category || 'All',
    // nonInteraction https://bit.ly/2CUzeoz
    nonInteraction: eventData.nonInteraction !== undefined ? !!eventData.nonInteraction : false
  };

  if (eventData.value) {
    // how much is this action worth?
    data.eventValue = format(eventData.value);
  }
  /* Attach campaign data */


  var campaignData = eventData.campaign || {};
  var name = campaignData.name,
      source = campaignData.source,
      medium = campaignData.medium,
      content = campaignData.content,
      keyword = campaignData.keyword;
  if (name) data.campaignName = name;
  if (source) data.campaignSource = source;
  if (medium) data.campaignMedium = medium;
  if (content) data.campaignContent = content;
  if (keyword) data.campaignKeyword = keyword;
  /* Send data to Google Analytics */

  ga('send', 'event', data);
  return data;
}
/**
 * Identify a visitor by Id
 * @param  {string} id - unique visitor ID
 */

function identifyVisitor$1(id) {
  if (gaNotLoaded()) return;
  if (id) ga('set', 'userId', id);
}

function format(value) {
  if (!value || value < 0) return 0;
  return Math.round(value);
}

/* This module will shake out unused code + work in browser and node ðŸŽ‰ */

var index = googleAnalytics$1;
/* init for CDN usage. globalName.init() */

var init = googleAnalytics$1;
/* Standalone API */

var initialize$2 = initialize$1;
var page = pageView$1;
var track = trackEvent$1;
var identify = identifyVisitor$1;

exports.default = index;
exports.init = init;
exports.identify = identify;
exports.track = track;
exports.page = page;
exports.initialize = initialize$2;
