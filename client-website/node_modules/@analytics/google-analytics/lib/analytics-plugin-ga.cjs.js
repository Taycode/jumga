'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var universalAnalytics;

{
  universalAnalytics = require('universal-analytics');
}
/**
 * Serverside Google Analytics plugin
 * @param {object} pluginConfig - Plugin settings
 * @param {string} pluginConfig.trackingId - site tracking Id
 * @return {*}
 * @example
 *
 * googleAnalytics({
 *   trackingId: '123-xyz'
 * })
 */


function googleAnalytics() {
  var pluginConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var client = initialize(pluginConfig);
  return {
    NAMESPACE: 'google-analytics',
    config: pluginConfig,
    // page view
    page: function page(_ref) {
      var payload = _ref.payload,
          config = _ref.config;
      var properties = payload.properties;
      var path = properties.path,
          href = properties.href,
          title = properties.title;
      pageView({
        path: path,
        href: href,
        title: title
      }, client);
    },
    // track event
    track: function track(_ref2) {
      var payload = _ref2.payload,
          config = _ref2.config;
      var event = payload.event,
          properties = payload.properties;
      var category = properties.category || 'All';
      var label = properties.label || 'NA';
      var value = properties.value;
      trackEvent({
        category: category,
        event: event,
        label: label,
        value: value,
        properties: properties
      }, client);
    },

    /* identify user */
    identify: function identify(_ref3) {
      var payload = _ref3.payload;
      return identifyVisitor(payload.userId, client);
    }
  };
}
function initialize(config) {
  if (!config.trackingId) throw new Error('No google analytics trackingId defined');
  return universalAnalytics(config.trackingId);
}
function pageView(_ref4, client) {
  var path = _ref4.path,
      href = _ref4.href,
      title = _ref4.title;

  if (!path || !href || !title) {
    throw new Error('Missing path, href or title in page call for GA');
  }

  client.pageview(path, href, title).send();
}
function trackEvent(_ref5, client) {
  var category = _ref5.category,
      event = _ref5.event,
      label = _ref5.label,
      value = _ref5.value,
      properties = _ref5.properties;
  // Todo map properties to custom dimensions
  client.event(category, event, label, value).send();
}
/**
 * Identify a visitor by Id
 * @param  {string} id - unique visitor ID
 * @param  {object} client - initialized GA client
 */

function identifyVisitor(id, client) {
  client.set('uid', id);
}

/* global ga */

/* This module will shake out unused code + work in browser and node ðŸŽ‰ */

var index = googleAnalytics;
/* init for CDN usage. globalName.init() */

var init = googleAnalytics;
/* Standalone API */

var initialize$2 = initialize;
var page = pageView;
var track = trackEvent;
var identify = identifyVisitor;

exports.default = index;
exports.init = init;
exports.identify = identify;
exports.track = track;
exports.page = page;
exports.initialize = initialize$2;
