{"version":3,"file":"react-query.development.js","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryObserver.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useMutation.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import type { Query, FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on reconnect for this query.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\n\nexport const isServer = typeof window === 'undefined'\n\nfunction noop(): void {\n  return void 0\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import { getStatusProps, isServer, isDocumentVisible } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type {\n  Query,\n  QueryState,\n  Action,\n  FetchMoreOptions,\n  RefetchOptions,\n} from './query'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateRefetchInterval()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearRefetchInterval()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateRefetchInterval()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.refetch(options)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetchMore(fetchMoreVariable, options)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    try {\n      return await this.currentQuery.fetch()\n    } catch (error) {\n      return undefined\n    }\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, previousResult, config } = this\n\n    const {\n      canFetchMore,\n      error,\n      failureCount,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isLoading,\n      isStale,\n    } = currentQuery.state\n\n    let { data, status, updatedAt } = currentQuery.state\n\n    // Keep previous data if needed\n    if (config.keepPreviousData && isLoading && previousResult?.isSuccess) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore,\n      clear: this.clear,\n      data,\n      error,\n      failureCount,\n      fetchMore: this.fetchMore,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config = prevQuery\n      ? { ...this.config, initialData: undefined }\n      : this.config\n\n    const newQuery = config.queryCache!.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    newQuery.activateTimeouts()\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    this.currentResult = this.createResult()\n\n    const { data, error, isSuccess, isError } = this.currentResult\n\n    if (action.type === 'Success' && isSuccess) {\n      this.config.onSuccess?.(data!)\n      this.config.onSettled?.(data!, null)\n      this.updateRefetchInterval()\n    } else if (action.type === 'Error' && isError) {\n      this.config.onError?.(error!)\n      this.config.onSettled?.(undefined, error!)\n      this.updateRefetchInterval()\n    }\n\n    this.updateListener?.(this.currentResult)\n  }\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  getStatusProps,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult | undefined>\n  private cacheTimeout?: number\n  private staleTimeout?: number\n  private cancelFetch?: () => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n  private enableTimeouts: boolean\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n    this.enableTimeouts = false\n  }\n\n  activateTimeouts(): void {\n    this.enableTimeouts = true\n    this.rescheduleStaleTimeout()\n    this.rescheduleGarbageCollection()\n  }\n\n  updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n    this.observers.forEach(d => d.onQueryUpdate(this.state, action))\n    this.notifyGlobalListeners(this)\n  }\n\n  private rescheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (\n      !this.enableTimeouts ||\n      this.state.isStale ||\n      this.state.status !== QueryStatus.Success ||\n      this.config.staleTime === Infinity\n    ) {\n      return\n    }\n\n    const staleTime = this.config.staleTime || 0\n    let timeout = staleTime\n    if (this.state.updatedAt) {\n      const timeElapsed = Date.now() - this.state.updatedAt\n      const timeUntilStale = staleTime - timeElapsed\n      timeout = Math.max(timeUntilStale, 0)\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, timeout)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  private rescheduleGarbageCollection(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearCacheTimeout()\n\n    if (\n      !this.enableTimeouts ||\n      this.config.cacheTime === Infinity ||\n      this.observers.length > 0\n    ) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(() => {\n      this.clear()\n    }, this.config.cacheTime)\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    try {\n      return await this.fetch()\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error\n      }\n      return undefined\n    }\n  }\n\n  cancel(): void {\n    this.cancelFetch?.()\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearRefetchInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    const isStale = this.config.staleTime === 0\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      isStale,\n      canFetchMore,\n    })\n\n    this.rescheduleStaleTimeout()\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  onWindowFocus(): void {\n    if (\n      this.state.isStale &&\n      this.observers.some(\n        observer =>\n          observer.config.enabled && observer.config.refetchOnWindowFocus\n      )\n    ) {\n      this.fetch()\n    }\n    this.continue()\n  }\n\n  onOnline(): void {\n    if (\n      this.state.isStale &&\n      this.observers.some(\n        observer =>\n          observer.config.enabled && observer.config.refetchOnReconnect\n      )\n    ) {\n      this.fetch()\n    }\n    this.continue()\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n    }\n\n    this.rescheduleGarbageCollection()\n  }\n\n  private async tryFetchData<T>(\n    config: QueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = () => {\n        reject(new CancelledError())\n        try {\n          cancelTransport?.()\n        } catch {}\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              promiseOrValue.cancel()\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    // Store reference to the config that initiated this fetch\n    const config = this.config\n\n    // Check if there is a query function\n    if (!config.queryFn) {\n      return\n    }\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state\n        this.dispatch({\n          type: ActionType.Error,\n          error,\n        })\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private async startFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn!(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async startInfiniteFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      const page = await config.queryFn!(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: QueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n  return undefined\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n    canFetchMore: hasMorePages(config, initialData),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Error),\n        error: action.error,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        isStale: true,\n        failureCount: state.failureCount + 1,\n        throwInErrorBoundary: true,\n      }\n    default:\n      return state\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  functionalUpdate,\n  getQueryArgs,\n  isDocumentVisible,\n  isObject,\n  isOnline,\n  isServer,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.observers.length) {\n            if (refetchActive && query.isEnabled()) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.updateConfig(config)\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n        this.notifyGlobalListeners(query)\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    let query\n    try {\n      query = this.buildQuery<TResult, TError>(queryKey, configWithoutRetry)\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (error) {\n      if (options?.throwOnError) {\n        throw error\n      }\n      return\n    } finally {\n      if (query) {\n        // When prefetching, no observer is tied to the query,\n        // so to avoid immediate garbage collection of the still\n        // empty query, we wait with activating timeouts until\n        // the prefetch is done\n        query.activateTimeouts()\n      }\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    const newQuery = this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n\n    newQuery.activateTimeouts()\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(isOnlineChange: boolean) {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache => {\n      queryCache.getQueries(query => {\n        if (isOnlineChange) {\n          query.onOnline()\n        } else {\n          query.onWindowFocus()\n        }\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(false)\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(true)\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useSafeState } from './utils'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n\n  const [isFetching, setIsFetching] = useSafeState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        setIsFetching(queryCache.isFetching)\n      }),\n    [queryCache, setIsFetching]\n  )\n\n  return isFetching\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    ...config,\n    keepPreviousData: true,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData:\n      result.query.state.data === result.data ? result.data : undefined,\n  }\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n"],"names":["QueryStatus","CancelledError","_uid","uid","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","deepIncludes","a","b","some","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","replaceEqualDeep","array","Array","isArray","isPlainObject","aSize","length","bItems","bSize","copy","equalItems","i","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","isCancelable","cancel","isError","isCancelledError","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","Loading","isSuccess","Success","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_CONFIG","queries","queryKeySerializerFn","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","structuralSharing","mergeReactQueryConfigs","shared","mutations","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","getDefaultedMutationConfig","then","direct","body","recover","e","QueryObserver","clear","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","optionalFetch","updateRefetchInterval","unsubscribe","clearRefetchInterval","unsubscribeObserver","updateConfig","prevConfig","updated","refetchInterval","refetchIntervalInBackground","getCurrentResult","currentResult","fetchMoreVariable","fetch","suspense","isFetched","isStale","observers","Infinity","refetchIntervalId","setInterval","clearInterval","createResult","previousResult","state","canFetchMore","failureCount","isFetching","isFetchingMore","data","updatedAt","keepPreviousData","query","prevQuery","initialData","newQuery","queryCache","buildQuery","activateTimeouts","onQueryUpdate","_state","action","type","onSuccess","onSettled","onError","f","arguments","apply","reject","ActionType","Query","init","notifyGlobalListeners","getDefaultState","enableTimeouts","rescheduleStaleTimeout","rescheduleGarbageCollection","dispatch","queryReducer","forEach","d","clearStaleTimeout","timeElapsed","Date","now","timeUntilStale","max","staleTimeout","invalidate","MarkStale","clearCacheTimeout","cacheTimeout","throwOnError","cancelFetch","continue","continueFetch","clearTimersObservers","observer","clearTimeout","setData","prevData","isDataEqual","hasMorePages","isEnabled","onWindowFocus","onOnline","push","filter","x","isTransportCancelable","tryFetchData","outerResolve","outerReject","resolved","continueLoop","cancelTransport","done","run","promiseOrValue","shouldRetry","Failed","continueResolve","promise","queryFnParamsFilter","params","infinite","startInfiniteFetch","startFetch","_options","fetchData","Fetch","previous","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","Boolean","hasInitialData","initialStale","initialStatus","throwInErrorBoundary","thrown","finalizer","QueryCache","globalListeners","values","acc","getDefaultConfig","defaultConfig","splice","indexOf","notify","getQueries","predicate","predicateFn","exact","getQuery","getQueryData","removeQueries","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","onVisibilityOrOnlineChange","isOnlineChange","setFocusHandler","handleFocus","addEventListener","removeEventListener","setOnlineHandler","handleOnline","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","useGetLatest","obj","ref","useRef","current","useCallback","useIsMounted","mountedRef","isMounted","useMountedCallback","useSafeState","initialState","useState","setState","safeSetState","scheduleMicrotask","useRerenderer","catch","useIsFetching","setIsFetching","useDefaultedMutationConfig","contextQueryCache","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","isLatest","snapshotValue","onMutate","reset","useErrorBoundary","useDefaultedQueryConfig","useBaseQuery","rerender","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}