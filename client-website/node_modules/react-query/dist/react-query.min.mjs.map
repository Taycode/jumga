{"version":3,"file":"react-query.min.mjs","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/query.ts","../src/core/queryObserver.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/core/setOnlineHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/useMutation.ts","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useDefaultedMutationConfig.tsx","../src/react/useBaseQuery.ts","../src/react/useDefaultedQueryConfig.tsx","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import type { Query, FetchMoreOptions, RefetchOptions } from './query'\nimport type { QueryCache } from './queryCache'\n\nexport type QueryKey =\n  | boolean\n  | null\n  | number\n  | object\n  | string\n  | undefined\n  | { [key: number]: QueryKey }\n  | { [key: string]: QueryKey }\n  | readonly QueryKey[]\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\nexport type TypedQueryFunction<\n  TResult,\n  TArgs extends TypedQueryFunctionArgs = TypedQueryFunctionArgs\n> = (...args: TArgs) => TResult | Promise<TResult>\n\nexport type TypedQueryFunctionArgs = readonly [unknown, ...unknown[]]\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown, TData = TResult> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  queryFn?: QueryFunction<TData>\n  queryKey?: QueryKey\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n  /**\n   * Set this to `false` to disable structural sharing between query results.\n   * Defaults to `true`.\n   */\n  structuralSharing?: boolean\n  /**\n   * This function can be set to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `canFetchMore`.\n   */\n  getFetchMore?: (lastPage: TData, allPages: TData[]) => unknown\n}\n\nexport interface QueryObserverConfig<\n  TResult,\n  TError = unknown,\n  TData = TResult\n> extends BaseQueryConfig<TResult, TError, TData> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   * Defaults to `true`.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If set to a number, the query will continuously refetch at this frequency in milliseconds.\n   * Defaults to `false`.\n   */\n  refetchInterval?: number | false\n  /**\n   * If set to `true`, the query will continue to refetch while their tab/window is in the background.\n   * Defaults to `false`.\n   */\n  refetchIntervalInBackground?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on window focus for this query.\n   * Defaults to `true`.\n   */\n  refetchOnWindowFocus?: boolean\n  /**\n   * Set this to `true` or `false` to enable/disable automatic refetching on reconnect for this query.\n   * Defaults to `true`.\n   */\n  refetchOnReconnect?: boolean\n  /**\n   * If set to `false`, will disable additional instances of a query to trigger background refetches.\n   * Defaults to `true`.\n   */\n  refetchOnMount?: boolean\n  /**\n   * This callback will fire any time the query successfully fetches new data.\n   */\n  onSuccess?: (data: TResult) => void\n  /**\n   * This callback will fire if the query encounters an error and will be passed the error.\n   */\n  onError?: (err: TError) => void\n  /**\n   * This callback will fire any time the query is either successfully fetched or errors and be passed either the data or error.\n   */\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  /**\n   * Whether errors should be thrown instead of setting the `error` property.\n   * Defaults to `false`.\n   */\n  useErrorBoundary?: boolean\n  /**\n   * If set to `true`, the query will suspend when `status === 'loading'`\n   * and throw errors when `status === 'error'`.\n   * Defaults to `false`.\n   */\n  suspense?: boolean\n  /**\n   * Set this to `true` to keep the previous `data` when fetching based on a new query key.\n   * Defaults to `false`.\n   */\n  keepPreviousData?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends QueryObserverConfig<TResult[], TError, TResult> {}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  canFetchMore: boolean | undefined\n  clear: () => void\n  data: TResult | undefined\n  error: TError | null\n  failureCount: number\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult | undefined>\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  query: Query<TResult, TError>\n  refetch: (options?: RefetchOptions) => Promise<TResult | undefined>\n  status: QueryStatus\n  updatedAt: number\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n  /**\n   * By default the query cache from the context is used, but a different cache can be specified.\n   */\n  queryCache?: QueryCache\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends QueryObserverConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport class CancelledError {}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\n\nexport const isServer = typeof window === 'undefined'\n\nfunction noop(): void {\n  return void 0\n}\n\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config ? { queryKey, ...config } : { queryKey }\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return replaceEqualDeep(a, b) === a\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n\nexport function createSetHandler(fn: () => void) {\n  let removePreviousHandler: (() => void) | void\n  return (callback: (handler: () => void) => void) => {\n    // Unsub the old handler\n    if (removePreviousHandler) {\n      removePreviousHandler()\n    }\n    // Sub the new handler\n    removePreviousHandler = callback(fn)\n  }\n}\n","import { stableStringify } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n  QueryConfig,\n  MutationConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\n/**\n * Config merging strategy\n *\n * When using hooks the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the hook query cache.\n * 3. Combined defaults from any config providers in the tree.\n * 4. Query/mutation config provided to the hook.\n *\n * When using a query cache directly the config will be merged in the following order:\n *\n * 1. These defaults.\n * 2. Defaults from the query cache.\n * 3. Query/mutation config provided to the query cache method.\n */\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    structuralSharing: true,\n  },\n}\n\nexport function mergeReactQueryConfigs(\n  a: ReactQueryConfig,\n  b: ReactQueryConfig\n): ReactQueryConfig {\n  return {\n    shared: {\n      ...a.shared,\n      ...b.shared,\n    },\n    queries: {\n      ...a.queries,\n      ...b.queries,\n    },\n    mutations: {\n      ...a.mutations,\n      ...b.mutations,\n    },\n  }\n}\n\nexport function getDefaultedQueryConfig<TResult, TError>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: QueryConfig<TResult, TError>,\n  configOverrides?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.queries,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.queries,\n    ...contextConfig?.shared,\n    ...contextConfig?.queries,\n    ...config,\n    ...configOverrides,\n  } as QueryConfig<TResult, TError>\n}\n\nexport function getDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  queryCacheConfig?: ReactQueryConfig,\n  contextConfig?: ReactQueryConfig,\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>,\n  configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  return {\n    ...DEFAULT_CONFIG.shared,\n    ...DEFAULT_CONFIG.mutations,\n    ...queryCacheConfig?.shared,\n    ...queryCacheConfig?.mutations,\n    ...contextConfig?.shared,\n    ...contextConfig?.mutations,\n    ...config,\n    ...configOverrides,\n  } as MutationConfig<TResult, TError, TVariables, TSnapshot>\n}\n","import {\n  CancelledError,\n  Console,\n  Updater,\n  functionalUpdate,\n  getStatusProps,\n  isCancelable,\n  isCancelledError,\n  isDocumentVisible,\n  isOnline,\n  isServer,\n  replaceEqualDeep,\n  sleep,\n} from './utils'\nimport {\n  ArrayQueryKey,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport { QueryObserver, UpdateListener } from './queryObserver'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport interface RefetchOptions {\n  throwOnError?: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n  isFetchingMore?: IsFetchingMoreValue\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  data: TResult | undefined\n  canFetchMore?: boolean\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  error: TError\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  observers: QueryObserver<TResult, TError>[]\n  state: QueryState<TResult, TError>\n\n  private queryCache: QueryCache\n  private promise?: Promise<TResult | undefined>\n  private cacheTimeout?: number\n  private staleTimeout?: number\n  private cancelFetch?: () => void\n  private continueFetch?: () => void\n  private isTransportCancelable?: boolean\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n  private enableTimeouts: boolean\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.observers = []\n    this.state = getDefaultState(init.config)\n    this.enableTimeouts = false\n  }\n\n  activateTimeouts(): void {\n    this.enableTimeouts = true\n    this.rescheduleStaleTimeout()\n    this.rescheduleGarbageCollection()\n  }\n\n  updateConfig(config: QueryConfig<TResult, TError>): void {\n    this.config = config\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    this.state = queryReducer(this.state, action)\n    this.observers.forEach(d => d.onQueryUpdate(this.state, action))\n    this.notifyGlobalListeners(this)\n  }\n\n  private rescheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (\n      !this.enableTimeouts ||\n      this.state.isStale ||\n      this.state.status !== QueryStatus.Success ||\n      this.config.staleTime === Infinity\n    ) {\n      return\n    }\n\n    const staleTime = this.config.staleTime || 0\n    let timeout = staleTime\n    if (this.state.updatedAt) {\n      const timeElapsed = Date.now() - this.state.updatedAt\n      const timeUntilStale = staleTime - timeElapsed\n      timeout = Math.max(timeUntilStale, 0)\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, timeout)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  private rescheduleGarbageCollection(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearCacheTimeout()\n\n    if (\n      !this.enableTimeouts ||\n      this.config.cacheTime === Infinity ||\n      this.observers.length > 0\n    ) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(() => {\n      this.clear()\n    }, this.config.cacheTime)\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    try {\n      return await this.fetch()\n    } catch (error) {\n      if (options?.throwOnError === true) {\n        throw error\n      }\n      return undefined\n    }\n  }\n\n  cancel(): void {\n    this.cancelFetch?.()\n  }\n\n  private continue(): void {\n    this.continueFetch?.()\n  }\n\n  private clearTimersObservers(): void {\n    this.observers.forEach(observer => {\n      observer.clearRefetchInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data: TResult | undefined = functionalUpdate(updater, prevData)\n\n    // Structurally share data between prev and new data if needed\n    if (this.config.structuralSharing) {\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.config.isDataEqual?.(prevData, data)) {\n      data = prevData\n    }\n\n    const isStale = this.config.staleTime === 0\n\n    // Try to determine if more data can be fetched\n    const canFetchMore = hasMorePages(this.config, data)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      data,\n      isStale,\n      canFetchMore,\n    })\n\n    this.rescheduleStaleTimeout()\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearTimersObservers()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  isEnabled(): boolean {\n    return this.observers.some(observer => observer.config.enabled)\n  }\n\n  onWindowFocus(): void {\n    if (\n      this.state.isStale &&\n      this.observers.some(\n        observer =>\n          observer.config.enabled && observer.config.refetchOnWindowFocus\n      )\n    ) {\n      this.fetch()\n    }\n    this.continue()\n  }\n\n  onOnline(): void {\n    if (\n      this.state.isStale &&\n      this.observers.some(\n        observer =>\n          observer.config.enabled && observer.config.refetchOnReconnect\n      )\n    ) {\n      this.fetch()\n    }\n    this.continue()\n  }\n\n  subscribe(\n    listener?: UpdateListener<TResult, TError>\n  ): QueryObserver<TResult, TError> {\n    const observer = new QueryObserver<TResult, TError>({\n      queryCache: this.queryCache,\n      queryKey: this.queryKey,\n      ...this.config,\n    })\n\n    observer.subscribe(listener)\n\n    return observer\n  }\n\n  subscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers.push(observer)\n\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n  }\n\n  unsubscribeObserver(observer: QueryObserver<TResult, TError>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n\n    if (!this.observers.length) {\n      // If the transport layer does not support cancellation\n      // we'll let the query continue so the result can be cached\n      if (this.isTransportCancelable) {\n        this.cancel()\n      }\n    }\n\n    this.rescheduleGarbageCollection()\n  }\n\n  private async tryFetchData<T>(\n    config: QueryConfig<TResult, TError>,\n    fn: QueryFunction<T>\n  ): Promise<T> {\n    return new Promise<T>((outerResolve, outerReject) => {\n      let resolved = false\n      let continueLoop: () => void\n      let cancelTransport: () => void\n\n      const done = () => {\n        resolved = true\n\n        delete this.cancelFetch\n        delete this.continueFetch\n        delete this.isTransportCancelable\n\n        // End loop if currently paused\n        continueLoop?.()\n      }\n\n      const resolve = (value: any) => {\n        done()\n        outerResolve(value)\n      }\n\n      const reject = (value: any) => {\n        done()\n        outerReject(value)\n      }\n\n      // Create callback to cancel this fetch\n      this.cancelFetch = () => {\n        reject(new CancelledError())\n        try {\n          cancelTransport?.()\n        } catch {}\n      }\n\n      // Create callback to continue this fetch\n      this.continueFetch = () => {\n        continueLoop?.()\n      }\n\n      // Create loop function\n      const run = async () => {\n        try {\n          // Execute query\n          const promiseOrValue = fn()\n\n          // Check if the transport layer support cancellation\n          if (isCancelable(promiseOrValue)) {\n            cancelTransport = () => {\n              promiseOrValue.cancel()\n            }\n            this.isTransportCancelable = true\n          }\n\n          // Await data\n          resolve(await promiseOrValue)\n        } catch (error) {\n          // Stop if the fetch is already resolved\n          if (resolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const { failureCount } = this.state\n          const { retry, retryDelay } = config\n\n          const shouldRetry =\n            retry === true ||\n            failureCount < retry! ||\n            (typeof retry === 'function' && retry(failureCount, error))\n\n          if (!shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          // Increase the failureCount\n          this.dispatch({ type: ActionType.Failed })\n\n          // Delay\n          await sleep(functionalUpdate(retryDelay, failureCount) || 0)\n\n          // Pause retry if the document is not visible or when the device is offline\n          if (!isDocumentVisible() || !isOnline()) {\n            await new Promise(continueResolve => {\n              continueLoop = continueResolve\n            })\n          }\n\n          // Try again if not resolved yet\n          if (!resolved) {\n            run()\n          }\n        }\n      }\n\n      // Start loop\n      run()\n    })\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    // Store reference to the config that initiated this fetch\n    const config = this.config\n\n    // Check if there is a query function\n    if (!config.queryFn) {\n      return\n    }\n\n    // Get the query function params\n    const filter = config.queryFnParamsFilter\n    const params = filter ? filter(this.queryKey) : this.queryKey\n\n    this.promise = (async () => {\n      try {\n        let data: any\n\n        if (config.infinite) {\n          data = await this.startInfiniteFetch(config, params, options)\n        } else {\n          data = await this.startFetch(config, params, options)\n        }\n\n        // Set success state\n        this.setData(data)\n\n        // Cleanup\n        delete this.promise\n\n        // Return data\n        return data\n      } catch (error) {\n        // Set error state\n        this.dispatch({\n          type: ActionType.Error,\n          error,\n        })\n\n        // Log error\n        if (!isCancelledError(error)) {\n          Console.error(error)\n        }\n\n        // Cleanup\n        delete this.promise\n\n        // Propagate error\n        throw error\n      }\n    })()\n\n    return this.promise\n  }\n\n  private async startFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    _options?: FetchOptions\n  ): Promise<TResult> {\n    // Create function to fetch the data\n    const fetchData = () => config.queryFn!(...params)\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch })\n    }\n\n    // Try to fetch the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  private async startInfiniteFetch(\n    config: QueryConfig<TResult, TError>,\n    params: unknown[],\n    options?: FetchOptions\n  ): Promise<TResult[]> {\n    const fetchMore = options?.fetchMore\n    const { previous, fetchMoreVariable } = fetchMore || {}\n    const isFetchingMore = fetchMore ? (previous ? 'previous' : 'next') : false\n    const prevPages: TResult[] = (this.state.data as any) || []\n\n    // Create function to fetch a page\n    const fetchPage = async (\n      pages: TResult[],\n      prepend?: boolean,\n      cursor?: unknown\n    ) => {\n      const lastPage = getLastPage(pages, prepend)\n\n      if (\n        typeof cursor === 'undefined' &&\n        typeof lastPage !== 'undefined' &&\n        config.getFetchMore\n      ) {\n        cursor = config.getFetchMore(lastPage, pages)\n      }\n\n      const page = await config.queryFn!(...params, cursor)\n\n      return prepend ? [page, ...pages] : [...pages, page]\n    }\n\n    // Create function to fetch the data\n    const fetchData = () => {\n      if (isFetchingMore) {\n        return fetchPage(prevPages, previous, fetchMoreVariable)\n      } else if (!prevPages.length) {\n        return fetchPage([])\n      } else {\n        let promise = fetchPage([])\n        for (let i = 1; i < prevPages.length; i++) {\n          promise = promise.then(fetchPage)\n        }\n        return promise\n      }\n    }\n\n    // Set to fetching state if not already in it\n    if (!this.state.isFetching) {\n      this.dispatch({ type: ActionType.Fetch, isFetchingMore })\n    }\n\n    // Try to get the data\n    return this.tryFetchData(config, fetchData)\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getLastPage<TResult>(pages: TResult[], previous?: boolean): TResult {\n  return previous ? pages[0] : pages[pages.length - 1]\n}\n\nfunction hasMorePages<TResult, TError>(\n  config: QueryConfig<TResult, TError>,\n  pages: unknown,\n  previous?: boolean\n): boolean | undefined {\n  if (config.infinite && config.getFetchMore && Array.isArray(pages)) {\n    return Boolean(config.getFetchMore(getLastPage(pages, previous), pages))\n  }\n  return undefined\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    isFetchingMore: false,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n    canFetchMore: hasMorePages(config, initialData),\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        isFetchingMore: action.isFetchingMore || false,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Error),\n        error: action.error,\n        isFetched: true,\n        isFetching: false,\n        isFetchingMore: false,\n        isStale: true,\n        failureCount: state.failureCount + 1,\n        throwInErrorBoundary: true,\n      }\n    default:\n      return state\n  }\n}\n","import { getStatusProps, isServer, isDocumentVisible } from './utils'\nimport type { QueryResult, QueryObserverConfig } from './types'\nimport type {\n  Query,\n  QueryState,\n  Action,\n  FetchMoreOptions,\n  RefetchOptions,\n} from './query'\n\nexport type UpdateListener<TResult, TError> = (\n  result: QueryResult<TResult, TError>\n) => void\n\nexport class QueryObserver<TResult, TError> {\n  config: QueryObserverConfig<TResult, TError>\n\n  private currentQuery!: Query<TResult, TError>\n  private currentResult!: QueryResult<TResult, TError>\n  private previousResult?: QueryResult<TResult, TError>\n  private updateListener?: UpdateListener<TResult, TError>\n  private refetchIntervalId?: number\n  private started?: boolean\n\n  constructor(config: QueryObserverConfig<TResult, TError>) {\n    this.config = config\n\n    // Bind exposed methods\n    this.clear = this.clear.bind(this)\n    this.refetch = this.refetch.bind(this)\n    this.fetchMore = this.fetchMore.bind(this)\n\n    // Subscribe to the query\n    this.updateQuery()\n  }\n\n  subscribe(listener?: UpdateListener<TResult, TError>): () => void {\n    this.started = true\n    this.updateListener = listener\n    this.currentQuery.subscribeObserver(this)\n    this.optionalFetch()\n    this.updateRefetchInterval()\n    return this.unsubscribe.bind(this)\n  }\n\n  unsubscribe(): void {\n    this.started = false\n    this.updateListener = undefined\n    this.clearRefetchInterval()\n    this.currentQuery.unsubscribeObserver(this)\n  }\n\n  updateConfig(config: QueryObserverConfig<TResult, TError>): void {\n    const prevConfig = this.config\n    this.config = config\n\n    const updated = this.updateQuery()\n\n    // Take no further actions if the observer did not start yet\n    if (!this.started) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (updated) {\n      this.optionalFetch()\n      this.updateRefetchInterval()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (config.enabled && !prevConfig.enabled) {\n      this.optionalFetch()\n    }\n\n    // Update refetch interval if needed\n    if (\n      config.enabled !== prevConfig.enabled ||\n      config.refetchInterval !== prevConfig.refetchInterval ||\n      config.refetchIntervalInBackground !==\n        prevConfig.refetchIntervalInBackground\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getCurrentResult(): QueryResult<TResult, TError> {\n    return this.currentResult\n  }\n\n  clear(): void {\n    return this.currentQuery.clear()\n  }\n\n  async refetch(options?: RefetchOptions): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.refetch(options)\n  }\n\n  async fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    return this.currentQuery.fetchMore(fetchMoreVariable, options)\n  }\n\n  async fetch(): Promise<TResult | undefined> {\n    this.currentQuery.updateConfig(this.config)\n    try {\n      return await this.currentQuery.fetch()\n    } catch (error) {\n      return undefined\n    }\n  }\n\n  private optionalFetch(): void {\n    if (\n      this.config.enabled && // Don't auto refetch if disabled\n      !(this.config.suspense && this.currentResult.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n      this.currentResult.isStale && // Only refetch if stale\n      (this.config.refetchOnMount || this.currentQuery.observers.length === 1)\n    ) {\n      this.fetch()\n    }\n  }\n\n  private updateRefetchInterval(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearRefetchInterval()\n\n    if (\n      !this.config.enabled ||\n      !this.config.refetchInterval ||\n      this.config.refetchInterval < 0 ||\n      this.config.refetchInterval === Infinity\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.config.refetchIntervalInBackground || isDocumentVisible()) {\n        this.fetch()\n      }\n    }, this.config.refetchInterval)\n  }\n\n  clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  private createResult(): QueryResult<TResult, TError> {\n    const { currentQuery, previousResult, config } = this\n\n    const {\n      canFetchMore,\n      error,\n      failureCount,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isLoading,\n      isStale,\n    } = currentQuery.state\n\n    let { data, status, updatedAt } = currentQuery.state\n\n    // Keep previous data if needed\n    if (config.keepPreviousData && isLoading && previousResult?.isSuccess) {\n      data = previousResult.data\n      updatedAt = previousResult.updatedAt\n      status = previousResult.status\n    }\n\n    return {\n      ...getStatusProps(status),\n      canFetchMore,\n      clear: this.clear,\n      data,\n      error,\n      failureCount,\n      fetchMore: this.fetchMore,\n      isFetched,\n      isFetching,\n      isFetchingMore,\n      isStale,\n      query: currentQuery,\n      refetch: this.refetch,\n      updatedAt,\n    }\n  }\n\n  private updateQuery(): boolean {\n    const prevQuery = this.currentQuery\n\n    // Remove the initial data when there is an existing query\n    // because this data should not be used for a new query\n    const config = prevQuery\n      ? { ...this.config, initialData: undefined }\n      : this.config\n\n    const newQuery = config.queryCache!.buildQuery(config.queryKey, config)\n\n    if (newQuery === prevQuery) {\n      return false\n    }\n\n    newQuery.activateTimeouts()\n\n    this.previousResult = this.currentResult\n    this.currentQuery = newQuery\n    this.currentResult = this.createResult()\n\n    if (this.started) {\n      prevQuery?.unsubscribeObserver(this)\n      this.currentQuery.subscribeObserver(this)\n    }\n\n    return true\n  }\n\n  onQueryUpdate(\n    _state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    this.currentResult = this.createResult()\n\n    const { data, error, isSuccess, isError } = this.currentResult\n\n    if (action.type === 'Success' && isSuccess) {\n      this.config.onSuccess?.(data!)\n      this.config.onSettled?.(data!, null)\n      this.updateRefetchInterval()\n    } else if (action.type === 'Error' && isError) {\n      this.config.onError?.(error!)\n      this.config.onSettled?.(undefined, error!)\n      this.updateRefetchInterval()\n    }\n\n    this.updateListener?.(this.currentResult)\n  }\n}\n","import {\n  Updater,\n  deepIncludes,\n  functionalUpdate,\n  getQueryArgs,\n  isDocumentVisible,\n  isObject,\n  isOnline,\n  isServer,\n} from './utils'\nimport { getDefaultedQueryConfig } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  ReactQueryConfig,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.config.defaultConfig\n  }\n\n  getDefaultedQueryConfig<TResult, TError>(\n    config?: QueryConfig<TResult, TError>\n  ): QueryConfig<TResult, TError> {\n    return getDefaultedQueryConfig(this.getDefaultConfig(), undefined, config, {\n      queryCache: this,\n    })\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const config = this.getDefaultedQueryConfig()\n      const [queryHash, queryKey] = config.queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.observers.length) {\n            if (refetchActive && query.isEnabled()) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig?: QueryConfig<TResult, TError>\n  ): Query<TResult, TError> {\n    const config = this.getDefaultedQueryConfig(queryConfig)\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.updateConfig(config)\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n        this.notifyGlobalListeners(query)\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n    queryKey: QueryKey,\n    queryFn: TypedQueryFunction<TResult, TArgs>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TResult>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult = unknown, TError = unknown>(\n    config: PrefetchQueryObjectConfig<TResult, TError>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    let query\n    try {\n      query = this.buildQuery<TResult, TError>(queryKey, configWithoutRetry)\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (error) {\n      if (options?.throwOnError) {\n        throw error\n      }\n      return\n    } finally {\n      if (query) {\n        // When prefetching, no observer is tied to the query,\n        // so to avoid immediate garbage collection of the still\n        // empty query, we wait with activating timeouts until\n        // the prefetch is done\n        query.activateTimeouts()\n      }\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config?: QueryConfig<TResult, TError>\n  ) {\n    const query = this.getQuery<TResult, TError>(queryKey)\n\n    if (query) {\n      query.setData(updater)\n      return\n    }\n\n    const newQuery = this.buildQuery<TResult, TError>(queryKey, {\n      initialStale: typeof config?.staleTime === 'undefined',\n      initialData: functionalUpdate(updater, undefined),\n      ...config,\n    })\n\n    newQuery.activateTimeouts()\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n\nexport function onVisibilityOrOnlineChange(isOnlineChange: boolean) {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache => {\n      queryCache.getQueries(query => {\n        if (isOnlineChange) {\n          query.onOnline()\n        } else {\n          query.onWindowFocus()\n        }\n      })\n    })\n  }\n}\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setFocusHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(false)\n)\n\nsetFocusHandler(handleFocus => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to visibillitychange and focus\n  window.addEventListener('visibilitychange', handleFocus, false)\n  window.addEventListener('focus', handleFocus, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('visibilitychange', handleFocus)\n    window.removeEventListener('focus', handleFocus)\n  }\n})\n","import { createSetHandler, isServer } from './utils'\nimport { onVisibilityOrOnlineChange } from './queryCache'\n\nexport const setOnlineHandler = createSetHandler(() =>\n  onVisibilityOrOnlineChange(true)\n)\n\nsetOnlineHandler(handleOnline => {\n  if (isServer || !window?.addEventListener) {\n    return\n  }\n\n  // Listen to online\n  window.addEventListener('online', handleOnline, false)\n\n  return () => {\n    // Be sure to unsubscribe if a new handler is set\n    window.removeEventListener('online', handleOnline)\n  }\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { mergeReactQueryConfigs } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useContextConfig() {\n  return React.useContext(configContext)\n}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const parentConfig = useContextConfig()\n\n  const mergedConfig = React.useMemo(\n    () =>\n      parentConfig ? mergeReactQueryConfigs(parentConfig, config) : config,\n    [config, parentConfig]\n  )\n\n  return (\n    <configContext.Provider value={mergedConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { useDefaultedMutationConfig } from './useDefaultedMutationConfig'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  config = useDefaultedMutationConfig(config)\n  const getConfig = useGetLatest(config)\n\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\nimport { isServer } from '../core/utils'\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nfunction useIsMounted(): () => boolean {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const isMounted = useIsMounted()\n  return (React.useCallback(\n    (...args: any[]) => {\n      if (isMounted()) {\n        return callback(...args)\n      }\n    },\n    [callback, isMounted]\n  ) as any) as T\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<S>(\n  initialState: S | (() => S)\n): [S, React.Dispatch<React.SetStateAction<S>>] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: React.SetStateAction<S>) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted]\n  )\n\n  return [state, safeSetState]\n}\n\nexport function useRerenderer() {\n  const [, setState] = useSafeState({})\n  return React.useCallback(() => setState({}), [setState])\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useSafeState } from './utils'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n\n  const [isFetching, setIsFetching] = useSafeState(queryCache.isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(() => {\n        setIsFetching(queryCache.isFetching)\n      }),\n    [queryCache, setIsFetching]\n  )\n\n  return isFetching\n}\n","import { MutationConfig } from '../core/types'\nimport { getDefaultedMutationConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedMutationConfig<\n  TResult,\n  TError,\n  TVariables,\n  TSnapshot\n>(\n  config?: MutationConfig<TResult, TError, TVariables, TSnapshot>\n): MutationConfig<TResult, TError, TVariables, TSnapshot> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedMutationConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import React from 'react'\n\nimport { useRerenderer } from './utils'\nimport { QueryObserver } from '../core/queryObserver'\nimport { QueryResultBase, QueryObserverConfig } from '../core/types'\nimport { useDefaultedQueryConfig } from './useDefaultedQueryConfig'\n\nexport function useBaseQuery<TResult, TError>(\n  config: QueryObserverConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  config = useDefaultedQueryConfig(config)\n\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Create query observer\n  const observerRef = React.useRef<QueryObserver<TResult, TError>>()\n  const firstRender = !observerRef.current\n  const observer = observerRef.current || new QueryObserver(config)\n  observerRef.current = observer\n\n  // Subscribe to the observer\n  React.useEffect(\n    () =>\n      observer.subscribe(() => {\n        rerender()\n      }),\n    [observer, rerender]\n  )\n\n  // Update config\n  if (!firstRender) {\n    observer.updateConfig(config)\n  }\n\n  const result = observer.getCurrentResult()\n\n  // Handle suspense\n  if (config.suspense || config.useErrorBoundary) {\n    if (result.isError && result.query.state.throwInErrorBoundary) {\n      throw result.error\n    }\n\n    if (config.enabled && config.suspense && !result.isSuccess) {\n      const unsubscribe = observer.subscribe()\n      throw observer.fetch().finally(unsubscribe)\n    }\n  }\n\n  return result\n}\n","import { QueryConfig } from '../core/types'\nimport { getDefaultedQueryConfig } from '../core/config'\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useContextConfig } from './ReactQueryConfigProvider'\n\nexport function useDefaultedQueryConfig<TResult, TError>(\n  config?: QueryConfig<TResult, TError>\n): QueryConfig<TResult, TError> {\n  const contextConfig = useContextConfig()\n  const contextQueryCache = useQueryCache()\n  const queryCache = config?.queryCache || contextQueryCache\n  const queryCacheConfig = queryCache.getDefaultConfig()\n  return getDefaultedQueryConfig(queryCacheConfig, contextConfig, config, {\n    queryCache,\n  })\n}\n","import {\n  QueryConfig,\n  QueryFunction,\n  QueryKey,\n  QueryResult,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TArgs extends TypedQueryFunctionArgs>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult = unknown, TError = unknown>(\n  config: UseQueryObjectConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  return useBaseQuery<TResult, TError>(config)\n}\n","import {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<TResult = unknown, TError = unknown>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult, TError>(args)[1]\n  const result = useBaseQuery<TResult, TError>({\n    ...config,\n    keepPreviousData: true,\n  })\n  return {\n    ...result,\n    resolvedData: result.data,\n    latestData:\n      result.query.state.data === result.data ? result.data : undefined,\n  }\n}\n","import {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryFunction,\n  QueryKey,\n  TypedQueryFunction,\n  TypedQueryFunctionArgs,\n} from '../core/types'\nimport { getQueryArgs } from '../core/utils'\nimport { useBaseQuery } from './useBaseQuery'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<TResult, TError> {\n  queryKey: QueryKey\n  queryFn?: QueryFunction<TResult>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TArgs extends TypedQueryFunctionArgs\n>(\n  queryKey: QueryKey,\n  queryFn: TypedQueryFunction<TResult, TArgs>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TResult>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<TResult = unknown, TError = unknown>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const config = getQueryArgs<TResult[], TError>(args)[1]\n  return useBaseQuery<TResult[], TError>({ ...config, infinite: true })\n}\n"],"names":["QueryStatus","CancelledError","_uid","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","a","Array","isArray","isPlainObject","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","isError","isCancelledError","getStatusProps","status","isLoading","Loading","isSuccess","Success","isIdle","Idle","createSetHandler","fn","removePreviousHandler","callback","DEFAULT_CONFIG","queries","queryKeySerializerFn","arrayQueryKey","queryHash","JSON","stringify","parse","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","structuralSharing","getDefaultedQueryConfig","queryCacheConfig","contextConfig","configOverrides","shared","ActionType","QueryObserver","clear","this","bind","refetch","fetchMore","updateQuery","subscribe","listener","started","updateListener","currentQuery","subscribeObserver","optionalFetch","updateRefetchInterval","unsubscribe","clearRefetchInterval","unsubscribeObserver","updateConfig","prevConfig","updated","refetchInterval","refetchIntervalInBackground","getCurrentResult","currentResult","fetchMoreVariable","fetch","_this6","body","recover","e","then","direct","Promise","resolve","suspense","isFetched","isStale","observers","length","Infinity","refetchIntervalId","setInterval","_this7","clearInterval","createResult","previousResult","state","canFetchMore","failureCount","isFetching","isFetchingMore","data","updatedAt","keepPreviousData","query","prevQuery","initialData","newQuery","queryCache","buildQuery","activateTimeouts","onQueryUpdate","_state","action","type","onSuccess","onSettled","onError","f","i","arguments","apply","reject","Query","init","hasInitialData","initialStatus","notifyGlobalListeners","initialStale","Date","now","hasMorePages","enableTimeouts","rescheduleStaleTimeout","rescheduleGarbageCollection","dispatch","Failed","MarkStale","Fetch","throwInErrorBoundary","queryReducer","forEach","d","_this","clearStaleTimeout","timeout","timeUntilStale","max","staleTimeout","setTimeout","_this2","invalidate","clearCacheTimeout","cacheTimeout","_this3","_this5","throwOnError","cancel","cancelFetch","continue","continueFetch","clearTimersObservers","observer","clearTimeout","setData","prevData","replaceEqualDeep","b","array","aSize","bItems","bSize","copy","equalItems","isDataEqual","_this$config$isDataEq","isEnabled","some","onWindowFocus","onOnline","push","filter","x","isTransportCancelable","tryFetchData","outerResolve","outerReject","continueLoop","cancelTransport","resolved","done","run","promiseOrValue","continueResolve","_this9","promise","queryFnParamsFilter","params","_async","infinite","startInfiniteFetch","startFetch","_options","previous","prevPages","fetchPage","pages","prepend","cursor","lastPage","getLastPage","getFetchMore","page","Boolean","thrown","finalizer","QueryCache","globalListeners","values","acc","getDefaultConfig","defaultConfig","splice","indexOf","notify","getQueries","predicate","predicateFn","exact","deepIncludes","getQuery","getQueryData","_this$getQuery","removeQueries","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","_this4","map","err","resetErrorBoundaries","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","onVisibilityOrOnlineChange","isOnlineChange","setFocusHandler","handleFocus","_window","addEventListener","removeEventListener","setOnlineHandler","handleOnline","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","Provider","configContext","useContextConfig","ReactQueryConfigProvider","parentConfig","mergedConfig","mutations","useGetLatest","obj","ref","useRef","current","useCallback","useIsMounted","mountedRef","isMounted","useSafeState","initialState","useState","setState","catch","useIsFetching","setIsFetching","useDefaultedMutationConfig","contextQueryCache","getDefaultedMutationConfig","_await","getDefaultState","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","getConfig","useReducer","unsafeDispatch","getMutationFn","latestMutationRef","mutate","variables","mutateConfig","mutationId","snapshotValue","isLatest","onMutate","reset","useErrorBoundary","useBaseQuery","useDefaultedQueryConfig","rerender","observerRef","firstRender","finally","useQuery","usePaginatedQuery","resolvedData","latestData","useInfiniteQuery"],"mappings":"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"}