import { QueryKeySerializerFunction, ReactQueryConfig, QueryConfig, MutationConfig } from './types';
export interface ReactQueryConfigRef {
    current: ReactQueryConfig;
}
export declare const defaultQueryKeySerializerFn: QueryKeySerializerFunction;
/**
 * Config merging strategy
 *
 * When using hooks the config will be merged in the following order:
 *
 * 1. These defaults.
 * 2. Defaults from the hook query cache.
 * 3. Combined defaults from any config providers in the tree.
 * 4. Query/mutation config provided to the hook.
 *
 * When using a query cache directly the config will be merged in the following order:
 *
 * 1. These defaults.
 * 2. Defaults from the query cache.
 * 3. Query/mutation config provided to the query cache method.
 */
export declare const DEFAULT_CONFIG: ReactQueryConfig;
export declare function mergeReactQueryConfigs(a: ReactQueryConfig, b: ReactQueryConfig): ReactQueryConfig;
export declare function getDefaultedQueryConfig<TResult, TError>(queryCacheConfig?: ReactQueryConfig, contextConfig?: ReactQueryConfig, config?: QueryConfig<TResult, TError>, configOverrides?: QueryConfig<TResult, TError>): QueryConfig<TResult, TError>;
export declare function getDefaultedMutationConfig<TResult, TError, TVariables, TSnapshot>(queryCacheConfig?: ReactQueryConfig, contextConfig?: ReactQueryConfig, config?: MutationConfig<TResult, TError, TVariables, TSnapshot>, configOverrides?: MutationConfig<TResult, TError, TVariables, TSnapshot>): MutationConfig<TResult, TError, TVariables, TSnapshot>;
