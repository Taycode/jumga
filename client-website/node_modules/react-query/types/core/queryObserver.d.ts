import { QueryResult, QueryObserverConfig } from './types';
import { QueryState, Action, FetchMoreOptions, RefetchOptions } from './query';
export declare type UpdateListener<TResult, TError> = (result: QueryResult<TResult, TError>) => void;
export declare class QueryObserver<TResult, TError> {
    config: QueryObserverConfig<TResult, TError>;
    private currentQuery;
    private currentResult;
    private previousResult?;
    private updateListener?;
    private refetchIntervalId?;
    private started?;
    constructor(config: QueryObserverConfig<TResult, TError>);
    subscribe(listener?: UpdateListener<TResult, TError>): () => void;
    unsubscribe(): void;
    updateConfig(config: QueryObserverConfig<TResult, TError>): void;
    getCurrentResult(): QueryResult<TResult, TError>;
    clear(): void;
    refetch(options?: RefetchOptions): Promise<TResult | undefined>;
    fetchMore(fetchMoreVariable?: unknown, options?: FetchMoreOptions): Promise<TResult | undefined>;
    fetch(): Promise<TResult | undefined>;
    private optionalFetch;
    private updateRefetchInterval;
    clearRefetchInterval(): void;
    private createResult;
    private updateQuery;
    onQueryUpdate(_state: QueryState<TResult, TError>, action: Action<TResult, TError>): void;
}
